{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport { PrimeReactContext } from 'primereact/api';\nimport { ComponentBase, useHandleStyle } from 'primereact/componentbase';\nimport { useMergeProps } from 'primereact/hooks';\nimport { ObjectUtils, classNames } from 'primereact/utils';\nvar classes = {\n  root: 'p-button-group p-component'\n};\nvar ButtonGroupBase = ComponentBase.extend({\n  defaultProps: {\n    __TYPE: 'ButtonGroup',\n    children: undefined\n  },\n  css: {\n    classes: classes\n  }\n});\nvar ButtonGroup = /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(function (inProps, ref) {\n  var mergeProps = useMergeProps();\n  var context = React.useContext(PrimeReactContext);\n  var props = ButtonGroupBase.getProps(inProps, context);\n  var elementRef = React.useRef(ref);\n  var _ButtonGroupBase$setM = ButtonGroupBase.setMetaData({\n      props: props\n    }),\n    ptm = _ButtonGroupBase$setM.ptm,\n    cx = _ButtonGroupBase$setM.cx,\n    isUnstyled = _ButtonGroupBase$setM.isUnstyled;\n  useHandleStyle(ButtonGroupBase.css.styles, isUnstyled, {\n    name: 'buttongroup'\n  });\n  React.useEffect(function () {\n    ObjectUtils.combinedRefs(elementRef, ref);\n  }, [elementRef, ref]);\n  var rootProps = mergeProps({\n    ref: elementRef,\n    className: classNames(cx('root')),\n    role: 'group'\n  }, ButtonGroupBase.getOtherProps(props), ptm('root'));\n  return /*#__PURE__*/React.createElement(\"span\", rootProps, props.children);\n}));\nButtonGroup.displayName = 'ButtonGroup';\nexport { ButtonGroup };","map":null,"metadata":{},"sourceType":"module"}