{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport PrimeReact, { localeOption, PrimeReactContext, localeOptions } from 'primereact/api';\nimport { Button } from 'primereact/button';\nimport { ComponentBase, useHandleStyle } from 'primereact/componentbase';\nimport { useMergeProps, usePrevious, useOverlayListener, useMountEffect, useUpdateEffect, useUnmountEffect } from 'primereact/hooks';\nimport { CalendarIcon } from 'primereact/icons/calendar';\nimport { ChevronDownIcon } from 'primereact/icons/chevrondown';\nimport { ChevronLeftIcon } from 'primereact/icons/chevronleft';\nimport { ChevronRightIcon } from 'primereact/icons/chevronright';\nimport { ChevronUpIcon } from 'primereact/icons/chevronup';\nimport { InputText } from 'primereact/inputtext';\nimport { OverlayService } from 'primereact/overlayservice';\nimport { Ripple } from 'primereact/ripple';\nimport { classNames, UniqueComponentId, DomHandler, ObjectUtils, mask, ZIndexUtils, IconUtils } from 'primereact/utils';\nimport { CSSTransition } from 'primereact/csstransition';\nimport { Portal } from 'primereact/portal';\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _arrayLikeToArray$1(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray$1(arr);\n}\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _unsupportedIterableToArray$1(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray$1(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen);\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray$1(arr) || _nonIterableSpread();\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nfunction _iterableToArrayLimit(r, l) {\n  var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (null != t) {\n    var e,\n      n,\n      i,\n      u,\n      a = [],\n      f = !0,\n      o = !1;\n    try {\n      if (i = (t = t.call(r)).next, 0 === l) {\n        if (Object(t) !== t) return;\n        f = !1;\n      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n    } catch (r) {\n      o = !0, n = r;\n    } finally {\n      try {\n        if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return;\n      } finally {\n        if (o) throw n;\n      }\n    }\n    return a;\n  }\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray$1(arr, i) || _nonIterableRest();\n}\nvar styles = \"\\n@layer primereact {\\n    .p-calendar {\\n        position: relative;\\n        display: inline-flex;\\n        max-width: 100%;\\n    }\\n\\n    .p-calendar .p-inputtext {\\n        flex: 1 1 auto;\\n        width: 1%;\\n    }\\n\\n    .p-calendar-w-btn-right .p-inputtext {\\n        border-top-right-radius: 0;\\n        border-bottom-right-radius: 0;\\n    }\\n\\n    .p-calendar-w-btn-right .p-datepicker-trigger {\\n        border-top-left-radius: 0;\\n        border-bottom-left-radius: 0;\\n    }\\n\\n    .p-calendar-w-btn-left .p-inputtext {\\n        border-top-left-radius: 0;\\n        border-bottom-left-radius: 0;\\n    }\\n\\n    .p-calendar-w-btn-left .p-datepicker-trigger {\\n        border-top-right-radius: 0;\\n        border-bottom-right-radius: 0;\\n    }\\n\\n    /* Fluid */\\n    .p-fluid .p-calendar {\\n        display: flex;\\n    }\\n\\n    .p-fluid .p-calendar .p-inputtext {\\n        width: 1%;\\n    }\\n\\n    /* Datepicker */\\n    .p-calendar .p-datepicker {\\n        min-width: 100%;\\n    }\\n\\n    .p-datepicker {\\n        width: auto;\\n        position: absolute;\\n        top: 0;\\n        left: 0;\\n    }\\n\\n    .p-datepicker-inline {\\n        display: inline-block;\\n        position: static;\\n        overflow-x: auto;\\n    }\\n\\n    /* Header */\\n    .p-datepicker-header {\\n        display: flex;\\n        align-items: center;\\n        justify-content: space-between;\\n    }\\n\\n    .p-datepicker-header .p-datepicker-title {\\n        margin: 0 auto;\\n    }\\n\\n    .p-datepicker-prev,\\n    .p-datepicker-next {\\n        cursor: pointer;\\n        display: inline-flex;\\n        justify-content: center;\\n        align-items: center;\\n        overflow: hidden;\\n        position: relative;\\n    }\\n\\n    /* Multiple Month DatePicker */\\n    .p-datepicker-multiple-month .p-datepicker-group-container {\\n        display: flex;\\n    }\\n\\n    .p-datepicker-multiple-month .p-datepicker-group-container .p-datepicker-group {\\n        flex: 1 1 auto;\\n    }\\n\\n    /* Multiple Month DatePicker */\\n    .p-datepicker-multiple-month .p-datepicker-group-container {\\n        display: flex;\\n    }\\n\\n    /* DatePicker Table */\\n    .p-datepicker table {\\n        width: 100%;\\n        border-collapse: collapse;\\n    }\\n\\n    .p-datepicker td > span {\\n        display: flex;\\n        justify-content: center;\\n        align-items: center;\\n        cursor: pointer;\\n        margin: 0 auto;\\n        overflow: hidden;\\n        position: relative;\\n    }\\n\\n    /* Month Picker */\\n    .p-monthpicker-month {\\n        width: 33.3%;\\n        display: inline-flex;\\n        align-items: center;\\n        justify-content: center;\\n        cursor: pointer;\\n        overflow: hidden;\\n        position: relative;\\n    }\\n\\n    /*  Button Bar */\\n    .p-datepicker-buttonbar {\\n        display: flex;\\n        justify-content: space-between;\\n        align-items: center;\\n    }\\n\\n    /* Time Picker */\\n    .p-timepicker {\\n        display: flex;\\n        justify-content: center;\\n        align-items: center;\\n    }\\n\\n    .p-timepicker button {\\n        display: flex;\\n        align-items: center;\\n        justify-content: center;\\n        cursor: pointer;\\n        overflow: hidden;\\n        position: relative;\\n    }\\n\\n    .p-timepicker > div {\\n        display: flex;\\n        align-items: center;\\n        flex-direction: column;\\n    }\\n\\n    /* Touch UI */\\n    .p-datepicker-touch-ui,\\n    .p-calendar .p-datepicker-touch-ui {\\n        position: fixed;\\n        top: 50%;\\n        left: 50%;\\n        min-width: 80vw;\\n        transform: translate(-50%, -50%);\\n    }\\n\\n    /* Year Picker */\\n    .p-yearpicker-year {\\n        width: 50%;\\n        display: inline-flex;\\n        align-items: center;\\n        justify-content: center;\\n        cursor: pointer;\\n        overflow: hidden;\\n        position: relative;\\n    }\\n}\\n\";\nvar classes = {\n  root: function root(_ref) {\n    var props = _ref.props,\n      focusedState = _ref.focusedState,\n      isFilled = _ref.isFilled,\n      panelVisible = _ref.panelVisible;\n    return classNames('p-calendar p-component p-inputwrapper', _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, \"p-calendar-w-btn p-calendar-w-btn-\".concat(props.iconPos), props.showIcon), 'p-calendar-disabled', props.disabled), 'p-invalid', props.invalid), 'p-calendar-timeonly', props.timeOnly), 'p-inputwrapper-filled', props.value || isFilled), 'p-inputwrapper-focus', focusedState), 'p-focus', focusedState || panelVisible));\n  },\n  input: function input(_ref2) {\n    var props = _ref2.props,\n      context = _ref2.context;\n    return classNames('p-inputtext p-component', {\n      'p-variant-filled': props.variant ? props.variant === 'filled' : context && context.inputStyle === 'filled'\n    });\n  },\n  dropdownButton: 'p-datepicker-trigger',\n  buttonbar: 'p-datepicker-buttonbar',\n  todayButton: 'p-button-text',\n  clearButton: 'p-button-text',\n  footer: 'p-datepicker-footer',\n  yearPicker: 'p-yearpicker',\n  year: function year(_ref3) {\n    var isYearSelected = _ref3.isYearSelected,\n      y = _ref3.y,\n      isMonthYearDisabled = _ref3.isMonthYearDisabled;\n    return classNames('p-yearpicker-year', {\n      'p-highlight': isYearSelected(y),\n      'p-disabled': isMonthYearDisabled(-1, y)\n    });\n  },\n  monthPicker: 'p-monthpicker',\n  month: function month(_ref4) {\n    var isMonthSelected = _ref4.isMonthSelected,\n      isMonthYearDisabled = _ref4.isMonthYearDisabled,\n      i = _ref4.i,\n      currentYear = _ref4.currentYear;\n    return classNames('p-monthpicker-month', {\n      'p-highlight': isMonthSelected(i),\n      'p-disabled': isMonthYearDisabled(i, currentYear)\n    });\n  },\n  hourPicker: 'p-hour-picker',\n  secondPicker: 'p-second-picker',\n  minutePicker: 'p-minute-picker',\n  millisecondPicker: 'p-millisecond-picker',\n  ampmPicker: 'p-ampm-picker',\n  separatorContainer: 'p-separator',\n  dayLabel: function dayLabel(_ref5) {\n    var className = _ref5.className;\n    return className;\n  },\n  day: function day(_ref6) {\n    var date = _ref6.date;\n    return classNames({\n      'p-datepicker-other-month': date.otherMonth,\n      'p-datepicker-today': date.today\n    });\n  },\n  panel: function panel(_ref7) {\n    var panelClassName = _ref7.panelClassName;\n    return panelClassName;\n  },\n  previousIcon: 'p-datepicker-prev-icon',\n  previousButton: 'p-datepicker-prev',\n  nextIcon: 'p-datepicker-next-icon',\n  nextButton: 'p-datepicker-next',\n  incrementButton: 'p-link',\n  decrementButton: 'p-link',\n  title: 'p-datepicker-title',\n  timePicker: 'p-timepicker',\n  monthTitle: 'p-datepicker-month p-link',\n  yearTitle: 'p-datepicker-year p-link',\n  decadeTitle: 'p-datepicker-decade',\n  header: 'p-datepicker-header',\n  groupContainer: 'p-datepicker-group-container',\n  group: 'p-datepicker-group',\n  select: function select(_ref8) {\n    var props = _ref8.props;\n    return props.monthNavigator && props.view !== 'month' ? 'p-datepicker-month' : props.yearNavigator ? 'p-datepicker-year' : undefined;\n  },\n  weekHeader: 'p-datepicker-weekheader p-disabled',\n  weekNumber: 'p-datepicker-weeknumber',\n  weekLabelContainer: 'p-disabled',\n  container: 'p-datepicker-calendar-container',\n  table: 'p-datepicker-calendar',\n  transition: 'p-connected-overlay'\n};\nvar CalendarBase = ComponentBase.extend({\n  defaultProps: {\n    __TYPE: 'Calendar',\n    appendTo: null,\n    ariaLabelledBy: null,\n    ariaLabel: null,\n    autoZIndex: true,\n    autoFocus: false,\n    baseZIndex: 0,\n    className: null,\n    clearButtonClassName: 'p-button-secondary',\n    dateFormat: null,\n    dateTemplate: null,\n    decadeTemplate: null,\n    decrementIcon: null,\n    disabled: false,\n    disabledDates: null,\n    disabledDays: null,\n    enabledDates: null,\n    footerTemplate: null,\n    formatDateTime: null,\n    headerTemplate: null,\n    hideOnDateTimeSelect: false,\n    hideOnRangeSelection: false,\n    hourFormat: '24',\n    icon: null,\n    iconPos: 'right',\n    id: null,\n    incrementIcon: null,\n    inline: false,\n    inputClassName: null,\n    inputId: null,\n    inputMode: 'none',\n    inputRef: null,\n    inputStyle: null,\n    variant: null,\n    invalid: false,\n    keepInvalid: false,\n    locale: null,\n    mask: null,\n    maskSlotChar: '_',\n    maxDate: null,\n    maxDateCount: null,\n    minDate: null,\n    monthNavigator: false,\n    monthNavigatorTemplate: null,\n    name: null,\n    nextIcon: null,\n    numberOfMonths: 1,\n    onBlur: null,\n    onChange: null,\n    onClearButtonClick: null,\n    onFocus: null,\n    onHide: null,\n    onInput: null,\n    onMonthChange: null,\n    onSelect: null,\n    onShow: null,\n    onTodayButtonClick: null,\n    onViewDateChange: null,\n    onVisibleChange: null,\n    panelClassName: null,\n    panelStyle: null,\n    parseDateTime: null,\n    placeholder: null,\n    prevIcon: null,\n    readOnlyInput: false,\n    required: false,\n    selectOtherMonths: false,\n    selectionMode: 'single',\n    shortYearCutoff: '+10',\n    showButtonBar: false,\n    showIcon: false,\n    showMillisec: false,\n    showMinMaxRange: false,\n    showOnFocus: true,\n    showOtherMonths: true,\n    showSeconds: false,\n    showTime: false,\n    showWeek: false,\n    stepHour: 1,\n    stepMillisec: 1,\n    stepMinute: 1,\n    stepSecond: 1,\n    style: null,\n    tabIndex: null,\n    timeOnly: false,\n    todayButtonClassName: 'p-button-secondary',\n    tooltip: null,\n    tooltipOptions: null,\n    touchUI: false,\n    transitionOptions: null,\n    value: null,\n    view: 'date',\n    viewDate: null,\n    visible: false,\n    yearNavigator: false,\n    yearNavigatorTemplate: null,\n    yearRange: null,\n    children: undefined\n  },\n  css: {\n    classes: classes,\n    styles: styles\n  }\n});\nvar CalendarPanel = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var cx = props.cx;\n  var mergeProps = useMergeProps();\n  var createElement = function createElement() {\n    var panelProps = mergeProps({\n      className: cx('panel', {\n        panelClassName: props.className\n      }),\n      style: props.style,\n      role: props.inline ? null : 'dialog',\n      id: props.id,\n      'aria-label': localeOption('chooseDate', props.locale),\n      'aria-modal': props.inline ? null : 'true',\n      onClick: props.onClick,\n      onMouseUp: props.onMouseUp\n    }, props.ptm('panel', {\n      hostName: props.hostName\n    }));\n    var transitionProps = mergeProps({\n      classNames: cx('transition'),\n      \"in\": props[\"in\"],\n      timeout: {\n        enter: 120,\n        exit: 100\n      },\n      options: props.transitionOptions,\n      unmountOnExit: true,\n      onEnter: props.onEnter,\n      onEntered: props.onEntered,\n      onExit: props.onExit,\n      onExited: props.onExited\n    }, props.ptm('transition', {\n      hostName: props.hostName\n    }));\n    return /*#__PURE__*/React.createElement(CSSTransition, _extends({\n      nodeRef: ref\n    }, transitionProps), /*#__PURE__*/React.createElement(\"div\", _extends({\n      ref: ref\n    }, panelProps), props.children));\n  };\n  var element = createElement();\n  return props.inline ? element : /*#__PURE__*/React.createElement(Portal, {\n    element: element,\n    appendTo: props.appendTo\n  });\n});\nCalendarPanel.displayName = 'CalendarPanel';\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nvar Calendar = /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(function (inProps, ref) {\n  var mergeProps = useMergeProps();\n  var context = React.useContext(PrimeReactContext);\n  var props = CalendarBase.getProps(inProps, context);\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    focusedState = _React$useState2[0],\n    setFocusedState = _React$useState2[1];\n  var _React$useState3 = React.useState(false),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    overlayVisibleState = _React$useState4[0],\n    setOverlayVisibleState = _React$useState4[1];\n  var _React$useState5 = React.useState(null),\n    _React$useState6 = _slicedToArray(_React$useState5, 2),\n    viewDateState = _React$useState6[0],\n    setViewDateState = _React$useState6[1];\n  var _React$useState7 = React.useState(props.id),\n    _React$useState8 = _slicedToArray(_React$useState7, 2),\n    idState = _React$useState8[0],\n    setIdState = _React$useState8[1];\n  var isTypingRef = React.useRef(false);\n  var metaData = {\n    props: props,\n    state: {\n      focused: focusedState,\n      overlayVisible: overlayVisibleState,\n      viewDate: viewDateState\n    }\n  };\n  var _CalendarBase$setMeta = CalendarBase.setMetaData(metaData),\n    ptm = _CalendarBase$setMeta.ptm,\n    cx = _CalendarBase$setMeta.cx,\n    isUnstyled = _CalendarBase$setMeta.isUnstyled;\n  useHandleStyle(CalendarBase.css.styles, isUnstyled, {\n    name: 'calendar'\n  });\n  var elementRef = React.useRef(null);\n  var overlayRef = React.useRef(null);\n  var inputRef = React.useRef(props.inputRef);\n  var navigation = React.useRef(null);\n  var ignoreFocusFunctionality = React.useRef(false);\n  var timePickerTimer = React.useRef(null);\n  var viewStateChanged = React.useRef(false);\n  var touchUIMask = React.useRef(null);\n  var overlayEventListener = React.useRef(null);\n  var touchUIMaskClickListener = React.useRef(null);\n  var isOverlayClicked = React.useRef(false);\n  var previousButton = React.useRef(false);\n  var nextButton = React.useRef(false);\n  var viewChangedWithKeyDown = React.useRef(false);\n  var onChangeRef = React.useRef(null);\n  var isClearClicked = React.useRef(false);\n  var _React$useState9 = React.useState('date'),\n    _React$useState10 = _slicedToArray(_React$useState9, 2),\n    currentView = _React$useState10[0],\n    setCurrentView = _React$useState10[1];\n  var _React$useState11 = React.useState(null),\n    _React$useState12 = _slicedToArray(_React$useState11, 2),\n    currentMonth = _React$useState12[0],\n    setCurrentMonth = _React$useState12[1];\n  var _React$useState13 = React.useState(null),\n    _React$useState14 = _slicedToArray(_React$useState13, 2),\n    currentYear = _React$useState14[0],\n    setCurrentYear = _React$useState14[1];\n  var _React$useState15 = React.useState([]),\n    _React$useState16 = _slicedToArray(_React$useState15, 2),\n    yearOptions = _React$useState16[0],\n    setYearOptions = _React$useState16[1];\n  var previousValue = usePrevious(props.value);\n  var visible = props.inline || (props.onVisibleChange ? props.visible : overlayVisibleState);\n  var attributeSelector = UniqueComponentId();\n  var panelId = idState + '_panel';\n  var _useOverlayListener = useOverlayListener({\n      target: elementRef,\n      overlay: overlayRef,\n      listener: function listener(event, _ref) {\n        var type = _ref.type,\n          valid = _ref.valid;\n        if (valid) {\n          type === 'outside' ? !isOverlayClicked.current && !isNavIconClicked(event.target) && hide('outside') : hide();\n        }\n        isOverlayClicked.current = false;\n      },\n      when: !(props.touchUI || props.inline) && visible,\n      type: 'mousedown'\n    }),\n    _useOverlayListener2 = _slicedToArray(_useOverlayListener, 2),\n    bindOverlayListener = _useOverlayListener2[0],\n    unbindOverlayListener = _useOverlayListener2[1];\n  var getDateFormat = function getDateFormat() {\n    return props.dateFormat || localeOption('dateFormat', props.locale);\n  };\n  var onInputFocus = function onInputFocus(event) {\n    if (ignoreFocusFunctionality.current) {\n      setFocusedState(true);\n      ignoreFocusFunctionality.current = false;\n    } else {\n      if (props.showOnFocus && !visible) {\n        show();\n      }\n      setFocusedState(true);\n      props.onFocus && props.onFocus(event);\n    }\n  };\n  var onInputBlur = function onInputBlur(event) {\n    updateInputfield(props.value);\n    props.onBlur && props.onBlur(event);\n    setFocusedState(false);\n  };\n  var onInputKeyDown = function onInputKeyDown(event) {\n    switch (event.code) {\n      case 'ArrowDown':\n        {\n          if (!overlayVisibleState) {\n            show();\n          } else {\n            focusToFirstCell();\n            event.preventDefault();\n          }\n          break;\n        }\n      case 'Escape':\n        {\n          hide();\n          props.touchUI && disableModality();\n          break;\n        }\n      case 'Tab':\n        {\n          if (overlayRef && overlayRef.current) {\n            DomHandler.getFocusableElements(overlayRef.current).forEach(function (el) {\n              return el.tabIndex = '-1';\n            });\n            hide();\n            props.touchUI && disableModality();\n          }\n          break;\n        }\n    }\n  };\n  var onUserInput = function onUserInput(event) {\n    updateValueOnInput(event, event.target.value);\n    props.onInput && props.onInput(event);\n  };\n  var updateValueOnInput = function updateValueOnInput(event, rawValue, invalidCallback) {\n    try {\n      var value = parseValueFromString(props.timeOnly ? rawValue.replace('_', '') : rawValue);\n      if (isValidSelection(value)) {\n        isTypingRef.current = true;\n        updateModel(event, value);\n        updateViewDate(event, value.length ? value[0] : value);\n      }\n    } catch (err) {\n      //invalid date\n      if (invalidCallback) {\n        invalidCallback();\n      } else {\n        var _value = props.keepInvalid ? rawValue : null;\n        updateModel(event, _value);\n      }\n    }\n  };\n  var reFocusInputField = function reFocusInputField() {\n    if (!props.inline && inputRef.current) {\n      ignoreFocusFunctionality.current = true;\n      DomHandler.focus(inputRef.current);\n    }\n  };\n  var isValidSelection = function isValidSelection(value) {\n    var isValid = true;\n    if (isSingleSelection()) {\n      if (!(isSelectable(value.getDate(), value.getMonth(), value.getFullYear(), false) && isSelectableTime(value))) {\n        isValid = false;\n      }\n    } else if (value.every(function (v) {\n      return isSelectable(v.getDate(), v.getMonth(), v.getFullYear(), false) && isSelectableTime(v);\n    })) {\n      if (isRangeSelection()) {\n        isValid = value.length > 1 && value[1] > value[0] ? true : false;\n      }\n    }\n    return isValid;\n  };\n  var onButtonClick = function onButtonClick() {\n    visible ? hide() : show();\n  };\n  var onPrevButtonClick = function onPrevButtonClick(event) {\n    navigation.current = {\n      backward: true,\n      button: true\n    };\n    navBackward(event);\n  };\n  var onNextButtonClick = function onNextButtonClick(event) {\n    navigation.current = {\n      backward: false,\n      button: true\n    };\n    navForward(event);\n  };\n  var onContainerButtonKeydown = function onContainerButtonKeydown(event) {\n    switch (event.code) {\n      case 'Tab':\n        !props.inline && trapFocus(event);\n        break;\n      case 'Escape':\n        hide(null, reFocusInputField);\n        event.preventDefault();\n        break;\n    }\n  };\n  var onPickerKeyDown = function onPickerKeyDown(event, type, direction) {\n    if (event.key === 'Enter' || event.key === 'Space') {\n      onTimePickerElementMouseDown(event, type, direction);\n      event.preventDefault();\n      return;\n    }\n    onContainerButtonKeydown(event);\n  };\n  var onPickerKeyUp = function onPickerKeyUp(event) {\n    if (event.key === 'Enter' || event.key === 'Space') {\n      onTimePickerElementMouseUp();\n      event.preventDefault();\n      return;\n    }\n  };\n  var trapFocus = function trapFocus(event) {\n    event === null || event === void 0 || event.preventDefault();\n    var focusableElements = DomHandler.getFocusableElements(overlayRef.current);\n    if (focusableElements && focusableElements.length > 0) {\n      if (!document.activeElement) {\n        focusableElements[0].focus();\n      } else {\n        var focusedIndex = focusableElements.indexOf(document.activeElement);\n        if (event !== null && event !== void 0 && event.shiftKey) {\n          if (focusedIndex === -1 || focusedIndex === 0) {\n            focusableElements[focusableElements.length - 1].focus();\n          } else {\n            focusableElements[focusedIndex - 1].focus();\n          }\n        } else if (focusedIndex === -1 || focusedIndex === focusableElements.length - 1) {\n          focusableElements[0].focus();\n        } else {\n          focusableElements[focusedIndex + 1].focus();\n        }\n      }\n    }\n  };\n  var updateFocus = function updateFocus() {\n    if (navigation.current) {\n      if (navigation.current.button) {\n        initFocusableCell();\n        if (navigation.current.backward) {\n          previousButton.current.focus();\n        } else {\n          nextButton.current.focus();\n        }\n      } else {\n        var cell;\n        if (navigation.current.backward) {\n          var cells = DomHandler.find(overlayRef.current, 'table td span:not([data-p-disabled=\"true\"])');\n          cell = cells[cells.length - 1];\n        } else {\n          cell = DomHandler.findSingle(overlayRef.current, 'table td span:not([data-p-disabled=\"true\"])');\n        }\n        if (cell) {\n          cell.tabIndex = '0';\n          cell.focus();\n        }\n      }\n      navigation.current = null;\n    } else {\n      initFocusableCell();\n    }\n  };\n  var initFocusableCell = function initFocusableCell() {\n    var cell;\n    if (currentView === 'month') {\n      var cells = DomHandler.find(overlayRef.current, '[data-pc-section=\"monthpicker\"] [data-pc-section=\"month\"]');\n      var selectedCell = DomHandler.findSingle(overlayRef.current, '[data-pc-section=\"monthpicker\"] [data-pc-section=\"month\"][data-p-highlight=\"true\"]');\n      cells.forEach(function (cell) {\n        return cell.tabIndex = -1;\n      });\n      cell = selectedCell || cells[0];\n    } else {\n      cell = DomHandler.findSingle(overlayRef.current, 'span[data-p-highlight=\"true\"]');\n      if (!cell) {\n        var todayCell = DomHandler.findSingle(overlayRef.current, 'td.p-datepicker-today span:not(.p-disabled)');\n        cell = todayCell || DomHandler.findSingle(overlayRef.current, 'table td span:not([data-p-disabled=\"true\"])');\n      }\n    }\n    if (cell) {\n      cell.tabIndex = '0';\n    }\n  };\n  var focusToFirstCell = function focusToFirstCell() {\n    if (currentView) {\n      var cell;\n      if (currentView === 'date') {\n        cell = DomHandler.findSingle(overlayRef.current, 'span[data-p-highlight=\"true\"]');\n        if (!cell) {\n          var todayCell = DomHandler.findSingle(overlayRef.current, 'td.p-datepicker-today span:not(.p-disabled)');\n          cell = todayCell || DomHandler.findSingle(overlayRef.current, 'table td span:not([data-p-disabled=\"true\"])');\n        }\n      } else if (currentView === 'month' || currentView === 'year') {\n        cell = DomHandler.findSingle(overlayRef.current, 'span[data-p-highlight=\"true\"]');\n        if (!cell) {\n          cell = DomHandler.findSingle(overlayRef.current, \"[data-pc-section=\\\"\".concat(currentView, \"picker\\\"] [data-pc-section=\\\"\").concat(currentView, \"\\\"]:not([data-p-disabled=\\\"true\\\"])\"));\n        }\n      }\n      if (cell) {\n        cell.tabIndex = '0';\n        cell && cell.focus();\n      }\n    }\n  };\n  var navBackward = function navBackward(event) {\n    if (props.disabled) {\n      event.preventDefault();\n      return;\n    }\n    var newViewDate = cloneDate(getViewDate());\n    newViewDate.setDate(1);\n    if (currentView === 'date') {\n      if (newViewDate.getMonth() === 0) {\n        var newYear = decrementYear();\n        newViewDate.setMonth(11);\n        newViewDate.setFullYear(newYear);\n        props.onMonthChange && props.onMonthChange({\n          month: 11,\n          year: newYear\n        });\n        setCurrentMonth(11);\n      } else {\n        newViewDate.setMonth(newViewDate.getMonth() - 1);\n        props.onMonthChange && props.onMonthChange({\n          month: currentMonth - 1,\n          year: currentYear\n        });\n        setCurrentMonth(function (prevState) {\n          return prevState - 1;\n        });\n      }\n    } else if (currentView === 'month') {\n      var _newYear = newViewDate.getFullYear() - 1;\n      if (props.yearNavigator) {\n        var minYear = parseInt(props.yearRange.split(':')[0], 10);\n        if (_newYear < minYear) {\n          _newYear = minYear;\n        }\n      }\n      newViewDate.setFullYear(_newYear);\n    }\n    if (currentView === 'month') {\n      newViewDate.setFullYear(decrementYear());\n    } else if (currentView === 'year') {\n      newViewDate.setFullYear(decrementDecade());\n    }\n    updateViewDate(event, newViewDate);\n    event.preventDefault();\n  };\n  var navForward = function navForward(event) {\n    if (props.disabled) {\n      event.preventDefault();\n      return;\n    }\n    var newViewDate = cloneDate(getViewDate());\n    newViewDate.setDate(1);\n    if (currentView === 'date') {\n      if (newViewDate.getMonth() === 11) {\n        var newYear = incrementYear();\n        newViewDate.setMonth(0);\n        newViewDate.setFullYear(newYear);\n        props.onMonthChange && props.onMonthChange({\n          month: 0,\n          year: newYear\n        });\n        setCurrentMonth(0);\n      } else {\n        newViewDate.setMonth(newViewDate.getMonth() + 1);\n        props.onMonthChange && props.onMonthChange({\n          month: currentMonth + 1,\n          year: currentYear\n        });\n        setCurrentMonth(function (prevState) {\n          return prevState + 1;\n        });\n      }\n    } else if (currentView === 'month') {\n      var _newYear2 = newViewDate.getFullYear() + 1;\n      if (props.yearNavigator) {\n        var maxYear = parseInt(props.yearRange.split(':')[1], 10);\n        if (_newYear2 > maxYear) {\n          _newYear2 = maxYear;\n        }\n      }\n      newViewDate.setFullYear(_newYear2);\n    }\n    if (currentView === 'month') {\n      newViewDate.setFullYear(incrementYear());\n    } else if (currentView === 'year') {\n      newViewDate.setFullYear(incrementDecade());\n    }\n    updateViewDate(event, newViewDate);\n    event.preventDefault();\n  };\n  var populateYearOptions = function populateYearOptions(start, end) {\n    var _yearOptions = [];\n    for (var i = start; i <= end; i++) {\n      yearOptions.push(i);\n    }\n    setYearOptions(_yearOptions);\n  };\n  var decrementYear = function decrementYear() {\n    var _currentYear = currentYear - 1;\n    setCurrentYear(_currentYear);\n    if (props.yearNavigator && _currentYear < yearOptions[0]) {\n      var difference = yearOptions[yearOptions.length - 1] - yearOptions[0];\n      populateYearOptions(yearOptions[0] - difference, yearOptions[yearOptions.length - 1] - difference);\n    }\n    return _currentYear;\n  };\n  var incrementYear = function incrementYear() {\n    var _currentYear = currentYear + 1;\n    setCurrentYear(_currentYear);\n    if (props.yearNavigator && _currentYear.current > yearOptions[yearOptions.length - 1]) {\n      var difference = yearOptions[yearOptions.length - 1] - yearOptions[0];\n      populateYearOptions(yearOptions[0] + difference, yearOptions[yearOptions.length - 1] + difference);\n    }\n    return _currentYear;\n  };\n  var onMonthDropdownChange = function onMonthDropdownChange(event, value) {\n    var currentViewDate = getViewDate();\n    var newViewDate = cloneDate(currentViewDate);\n    newViewDate.setDate(1);\n    newViewDate.setMonth(parseInt(value, 10));\n    updateViewDate(event, newViewDate);\n  };\n  var onYearDropdownChange = function onYearDropdownChange(event, value) {\n    var currentViewDate = getViewDate();\n    var newViewDate = cloneDate(currentViewDate);\n    newViewDate.setFullYear(parseInt(value, 10));\n    updateViewDate(event, newViewDate);\n  };\n  var onTodayButtonClick = function onTodayButtonClick(event) {\n    var today = new Date();\n    var dateMeta = {\n      day: today.getDate(),\n      month: today.getMonth(),\n      year: today.getFullYear(),\n      today: true,\n      selectable: true\n    };\n    var timeMeta = {\n      hours: today.getHours(),\n      minutes: today.getMinutes(),\n      seconds: today.getSeconds(),\n      milliseconds: today.getMilliseconds()\n    };\n    updateViewDate(event, today);\n    onDateSelect(event, dateMeta, timeMeta);\n    props.onTodayButtonClick && props.onTodayButtonClick(event);\n  };\n  var onClearButtonClick = function onClearButtonClick(event) {\n    isClearClicked.current = true;\n    updateModel(event, null);\n    updateInputfield(null);\n    hide();\n    props.onClearButtonClick && props.onClearButtonClick(event);\n  };\n  var onPanelClick = function onPanelClick(event) {\n    if (!props.inline) {\n      OverlayService.emit('overlay-click', {\n        originalEvent: event,\n        target: elementRef.current\n      });\n    }\n  };\n  var onPanelMouseUp = function onPanelMouseUp(event) {\n    onPanelClick(event);\n  };\n  var onTimePickerElementMouseDown = function onTimePickerElementMouseDown(event, type, direction) {\n    if (!props.disabled) {\n      repeat(event, null, type, direction);\n      event.preventDefault();\n    }\n  };\n  var onTimePickerElementMouseUp = function onTimePickerElementMouseUp() {\n    if (!props.disabled) {\n      clearTimePickerTimer();\n    }\n  };\n  var onTimePickerElementMouseLeave = function onTimePickerElementMouseLeave() {\n    if (!props.disabled) {\n      clearTimePickerTimer();\n    }\n  };\n  var repeat = function repeat(event, interval, type, direction) {\n    clearTimePickerTimer();\n    timePickerTimer.current = setTimeout(function () {\n      repeat(event, 100, type, direction);\n    }, interval || 500);\n    switch (type) {\n      case 0:\n        if (direction === 1) {\n          incrementHour(event);\n        } else {\n          decrementHour(event);\n        }\n        break;\n      case 1:\n        if (direction === 1) {\n          incrementMinute(event);\n        } else {\n          decrementMinute(event);\n        }\n        break;\n      case 2:\n        if (direction === 1) {\n          incrementSecond(event);\n        } else {\n          decrementSecond(event);\n        }\n        break;\n      case 3:\n        if (direction === 1) {\n          incrementMilliSecond(event);\n        } else {\n          decrementMilliSecond(event);\n        }\n        break;\n    }\n  };\n  var clearTimePickerTimer = function clearTimePickerTimer() {\n    if (timePickerTimer.current) {\n      clearTimeout(timePickerTimer.current);\n    }\n  };\n  var roundMinutesToStep = function roundMinutesToStep(minutes) {\n    if (props.stepMinute) {\n      return Math.round(minutes / props.stepMinute) * props.stepMinute;\n    }\n    return minutes;\n  };\n  var incrementHour = function incrementHour(event) {\n    var currentTime = getCurrentDateTime();\n    var currentHour = currentTime.getHours();\n    var newHour = currentHour + props.stepHour;\n    newHour = newHour >= 24 ? newHour - 24 : newHour;\n    if (validateHour(newHour, currentTime)) {\n      if (props.maxDate && props.maxDate.toDateString() === currentTime.toDateString() && props.maxDate.getHours() === newHour) {\n        if (props.maxDate.getMinutes() < currentTime.getMinutes()) {\n          if (props.maxDate.getSeconds() < currentTime.getSeconds()) {\n            if (props.maxDate.getMilliseconds() < currentTime.getMilliseconds()) {\n              updateTime(event, newHour, props.maxDate.getMinutes(), props.maxDate.getSeconds(), props.maxDate.getMilliseconds());\n            } else {\n              updateTime(event, newHour, props.maxDate.getMinutes(), props.maxDate.getSeconds(), currentTime.getMilliseconds());\n            }\n          } else {\n            updateTime(event, newHour, props.maxDate.getMinutes(), currentTime.getSeconds(), currentTime.getMilliseconds());\n          }\n        } else if (props.maxDate.getMinutes() === currentTime.getMinutes()) {\n          if (props.maxDate.getSeconds() < currentTime.getSeconds()) {\n            if (props.maxDate.getMilliseconds() < currentTime.getMilliseconds()) {\n              updateTime(event, newHour, props.maxDate.getMinutes(), props.maxDate.getSeconds(), props.maxDate.getMilliseconds());\n            } else {\n              updateTime(event, newHour, props.maxDate.getMinutes(), props.maxDate.getSeconds(), currentTime.getMilliseconds());\n            }\n          } else {\n            updateTime(event, newHour, props.maxDate.getMinutes(), currentTime.getSeconds(), currentTime.getMilliseconds());\n          }\n        } else {\n          updateTime(event, newHour, roundMinutesToStep(currentTime.getMinutes()), currentTime.getSeconds(), currentTime.getMilliseconds());\n        }\n      } else {\n        updateTime(event, newHour, roundMinutesToStep(currentTime.getMinutes()), currentTime.getSeconds(), currentTime.getMilliseconds());\n      }\n    }\n    event.preventDefault();\n  };\n  var decrementHour = function decrementHour(event) {\n    var currentTime = getCurrentDateTime();\n    var currentHour = currentTime.getHours();\n    var newHour = currentHour - props.stepHour;\n    newHour = newHour < 0 ? newHour + 24 : newHour;\n    if (validateHour(newHour, currentTime)) {\n      if (props.minDate && props.minDate.toDateString() === currentTime.toDateString() && props.minDate.getHours() === newHour) {\n        if (props.minDate.getMinutes() > currentTime.getMinutes()) {\n          if (props.minDate.getSeconds() > currentTime.getSeconds()) {\n            if (props.minDate.getMilliseconds() > currentTime.getMilliseconds()) {\n              updateTime(event, newHour, props.minDate.getMinutes(), props.minDate.getSeconds(), props.minDate.getMilliseconds());\n            } else {\n              updateTime(event, newHour, props.minDate.getMinutes(), props.minDate.getSeconds(), currentTime.getMilliseconds());\n            }\n          } else {\n            updateTime(event, newHour, props.minDate.getMinutes(), currentTime.getSeconds(), currentTime.getMilliseconds());\n          }\n        } else if (props.minDate.getMinutes() === currentTime.getMinutes()) {\n          if (props.minDate.getSeconds() > currentTime.getSeconds()) {\n            if (props.minDate.getMilliseconds() > currentTime.getMilliseconds()) {\n              updateTime(event, newHour, props.minDate.getMinutes(), props.minDate.getSeconds(), props.minDate.getMilliseconds());\n            } else {\n              updateTime(event, newHour, props.minDate.getMinutes(), props.minDate.getSeconds(), currentTime.getMilliseconds());\n            }\n          } else {\n            updateTime(event, newHour, props.minDate.getMinutes(), currentTime.getSeconds(), currentTime.getMilliseconds());\n          }\n        } else {\n          updateTime(event, newHour, roundMinutesToStep(currentTime.getMinutes()), currentTime.getSeconds(), currentTime.getMilliseconds());\n        }\n      } else {\n        updateTime(event, newHour, roundMinutesToStep(currentTime.getMinutes()), currentTime.getSeconds(), currentTime.getMilliseconds());\n      }\n    }\n    event.preventDefault();\n  };\n  var doStepMinute = function doStepMinute(currentMinute, step) {\n    if (props.stepMinute <= 1) {\n      return step ? currentMinute + step : currentMinute;\n    }\n    if (!step) {\n      step = props.stepMinute;\n      if (currentMinute % step === 0) {\n        return currentMinute;\n      }\n    }\n    return Math.floor((currentMinute + step) / step) * step;\n  };\n  var incrementMinute = function incrementMinute(event) {\n    var currentTime = getCurrentDateTime();\n    var currentMinute = currentTime.getMinutes();\n    var newMinute = doStepMinute(currentMinute, props.stepMinute);\n    newMinute = newMinute > 59 ? newMinute - 60 : newMinute;\n    if (validateMinute(newMinute, currentTime)) {\n      if (props.maxDate && props.maxDate.toDateString() === currentTime.toDateString() && props.maxDate.getMinutes() === newMinute) {\n        if (props.maxDate.getSeconds() < currentTime.getSeconds()) {\n          if (props.maxDate.getMilliseconds() < currentTime.getMilliseconds()) {\n            updateTime(event, currentTime.getHours(), newMinute, props.maxDate.getSeconds(), props.maxDate.getMilliseconds());\n          } else {\n            updateTime(event, currentTime.getHours(), newMinute, props.maxDate.getSeconds(), currentTime.getMilliseconds());\n          }\n        } else {\n          updateTime(event, currentTime.getHours(), newMinute, currentTime.getSeconds(), currentTime.getMilliseconds());\n        }\n      } else {\n        updateTime(event, currentTime.getHours(), newMinute, currentTime.getSeconds(), currentTime.getMilliseconds());\n      }\n    }\n    event.preventDefault();\n  };\n  var decrementMinute = function decrementMinute(event) {\n    var currentTime = getCurrentDateTime();\n    var currentMinute = currentTime.getMinutes();\n    var newMinute = doStepMinute(currentMinute, -props.stepMinute);\n    newMinute = newMinute < 0 ? newMinute + 60 : newMinute;\n    if (validateMinute(newMinute, currentTime)) {\n      if (props.minDate && props.minDate.toDateString() === currentTime.toDateString() && props.minDate.getMinutes() === newMinute) {\n        if (props.minDate.getSeconds() > currentTime.getSeconds()) {\n          if (props.minDate.getMilliseconds() > currentTime.getMilliseconds()) {\n            updateTime(event, currentTime.getHours(), newMinute, props.minDate.getSeconds(), props.minDate.getMilliseconds());\n          } else {\n            updateTime(event, currentTime.getHours(), newMinute, props.minDate.getSeconds(), currentTime.getMilliseconds());\n          }\n        } else {\n          updateTime(event, currentTime.getHours(), newMinute, currentTime.getSeconds(), currentTime.getMilliseconds());\n        }\n      } else {\n        updateTime(event, currentTime.getHours(), newMinute, currentTime.getSeconds(), currentTime.getMilliseconds());\n      }\n    }\n    event.preventDefault();\n  };\n  var incrementSecond = function incrementSecond(event) {\n    var currentTime = getCurrentDateTime();\n    var currentSecond = currentTime.getSeconds();\n    var newSecond = currentSecond + props.stepSecond;\n    newSecond = newSecond > 59 ? newSecond - 60 : newSecond;\n    if (validateSecond(newSecond, currentTime)) {\n      if (props.maxDate && props.maxDate.toDateString() === currentTime.toDateString() && props.maxDate.getSeconds() === newSecond) {\n        if (props.maxDate.getMilliseconds() < currentTime.getMilliseconds()) {\n          updateTime(event, currentTime.getHours(), currentTime.getMinutes(), newSecond, props.maxDate.getMilliseconds());\n        } else {\n          updateTime(event, currentTime.getHours(), currentTime.getMinutes(), newSecond, currentTime.getMilliseconds());\n        }\n      } else {\n        updateTime(event, currentTime.getHours(), currentTime.getMinutes(), newSecond, currentTime.getMilliseconds());\n      }\n    }\n    event.preventDefault();\n  };\n  var decrementSecond = function decrementSecond(event) {\n    var currentTime = getCurrentDateTime();\n    var currentSecond = currentTime.getSeconds();\n    var newSecond = currentSecond - props.stepSecond;\n    newSecond = newSecond < 0 ? newSecond + 60 : newSecond;\n    if (validateSecond(newSecond, currentTime)) {\n      if (props.minDate && props.minDate.toDateString() === currentTime.toDateString() && props.minDate.getSeconds() === newSecond) {\n        if (props.minDate.getMilliseconds() > currentTime.getMilliseconds()) {\n          updateTime(event, currentTime.getHours(), currentTime.getMinutes(), newSecond, props.minDate.getMilliseconds());\n        } else {\n          updateTime(event, currentTime.getHours(), currentTime.getMinutes(), newSecond, currentTime.getMilliseconds());\n        }\n      } else {\n        updateTime(event, currentTime.getHours(), currentTime.getMinutes(), newSecond, currentTime.getMilliseconds());\n      }\n    }\n    event.preventDefault();\n  };\n  var incrementMilliSecond = function incrementMilliSecond(event) {\n    var currentTime = getCurrentDateTime();\n    var currentMillisecond = currentTime.getMilliseconds();\n    var newMillisecond = currentMillisecond + props.stepMillisec;\n    newMillisecond = newMillisecond > 999 ? newMillisecond - 1000 : newMillisecond;\n    if (validateMillisecond(newMillisecond, currentTime)) {\n      updateTime(event, currentTime.getHours(), currentTime.getMinutes(), currentTime.getSeconds(), newMillisecond);\n    }\n    event.preventDefault();\n  };\n  var decrementMilliSecond = function decrementMilliSecond(event) {\n    var currentTime = getCurrentDateTime();\n    var currentMillisecond = currentTime.getMilliseconds();\n    var newMillisecond = currentMillisecond - props.stepMillisec;\n    newMillisecond = newMillisecond < 0 ? newMillisecond + 999 : newMillisecond;\n    if (validateMillisecond(newMillisecond, currentTime)) {\n      updateTime(event, currentTime.getHours(), currentTime.getMinutes(), currentTime.getSeconds(), newMillisecond);\n    }\n    event.preventDefault();\n  };\n  var toggleAmPm = function toggleAmPm(event) {\n    var currentTime = getCurrentDateTime();\n    var currentHour = currentTime.getHours();\n    var newHour = currentHour >= 12 ? currentHour - 12 : currentHour + 12;\n    if (validateHour(convertTo24Hour(newHour, currentHour > 11), currentTime)) {\n      updateTime(event, newHour, currentTime.getMinutes(), currentTime.getSeconds(), currentTime.getMilliseconds());\n    }\n    event.preventDefault();\n  };\n  var getViewDate = function getViewDate(date) {\n    var propValue = props.value;\n    var viewDate = date || (props.onViewDateChange ? props.viewDate : viewDateState);\n    if (Array.isArray(propValue)) {\n      propValue = propValue[0];\n    }\n    return viewDate && isValidDate(viewDate) ? viewDate : propValue && isValidDate(propValue) ? propValue : new Date();\n  };\n  var getCurrentDateTime = function getCurrentDateTime() {\n    if (isSingleSelection()) {\n      return props.value && props.value instanceof Date ? cloneDate(props.value) : getViewDate();\n    } else if (isMultipleSelection()) {\n      if (props.value && props.value.length) {\n        return cloneDate(props.value[props.value.length - 1]);\n      }\n    } else if (isRangeSelection()) {\n      if (props.value && props.value.length) {\n        var startDate = cloneDate(props.value[0]);\n        var endDate = cloneDate(props.value[1]);\n        return endDate || startDate;\n      }\n    }\n    return new Date();\n  };\n  var cloneDate = function cloneDate(date) {\n    return isValidDate(date) ? new Date(date.valueOf()) : date;\n  };\n  var isValidDate = function isValidDate(date) {\n    return date instanceof Date && !isNaN(date);\n  };\n  var convertTo24Hour = function convertTo24Hour(hour, pm) {\n    if (props.hourFormat === '12') {\n      return hour === 12 ? pm ? 12 : 0 : pm ? hour + 12 : hour;\n    }\n    return hour;\n  };\n  var validateHour = function validateHour(hour, value) {\n    var valid = true;\n    var valueDateString = value ? value.toDateString() : null;\n    if (props.minDate && valueDateString && props.minDate.toDateString() === valueDateString) {\n      if (props.minDate.getHours() > hour) {\n        valid = false;\n      }\n    }\n    if (props.maxDate && valueDateString && props.maxDate.toDateString() === valueDateString) {\n      if (props.maxDate.getHours() < hour) {\n        valid = false;\n      }\n    }\n    return valid;\n  };\n  var validateMinute = function validateMinute(minute, value) {\n    var valid = true;\n    var valueDateString = value ? value.toDateString() : null;\n    if (props.minDate && valueDateString && props.minDate.toDateString() === valueDateString) {\n      if (value.getHours() === props.minDate.getHours()) {\n        if (props.minDate.getMinutes() > minute) {\n          valid = false;\n        }\n      }\n    }\n    if (props.maxDate && valueDateString && props.maxDate.toDateString() === valueDateString) {\n      if (value.getHours() === props.maxDate.getHours()) {\n        if (props.maxDate.getMinutes() < minute) {\n          valid = false;\n        }\n      }\n    }\n    return valid;\n  };\n  var validateSecond = function validateSecond(second, value) {\n    var valid = true;\n    var valueDateString = value ? value.toDateString() : null;\n    if (props.minDate && valueDateString && props.minDate.toDateString() === valueDateString) {\n      if (value.getHours() === props.minDate.getHours() && value.getMinutes() === props.minDate.getMinutes()) {\n        if (props.minDate.getSeconds() > second) {\n          valid = false;\n        }\n      }\n    }\n    if (props.maxDate && valueDateString && props.maxDate.toDateString() === valueDateString) {\n      if (value.getHours() === props.maxDate.getHours() && value.getMinutes() === props.maxDate.getMinutes()) {\n        if (props.maxDate.getSeconds() < second) {\n          valid = false;\n        }\n      }\n    }\n    return valid;\n  };\n  var validateMillisecond = function validateMillisecond(millisecond, value) {\n    var valid = true;\n    var valueDateString = value ? value.toDateString() : null;\n    if (props.minDate && valueDateString && props.minDate.toDateString() === valueDateString) {\n      if (value.getHours() === props.minDate.getHours() && value.getSeconds() === props.minDate.getSeconds() && value.getMinutes() === props.minDate.getMinutes()) {\n        if (props.minDate.getMilliseconds() > millisecond) {\n          valid = false;\n        }\n      }\n    }\n    if (props.maxDate && valueDateString && props.maxDate.toDateString() === valueDateString) {\n      if (value.getHours() === props.maxDate.getHours() && value.getSeconds() === props.maxDate.getSeconds() && value.getMinutes() === props.maxDate.getMinutes()) {\n        if (props.maxDate.getMilliseconds() < millisecond) {\n          valid = false;\n        }\n      }\n    }\n    return valid;\n  };\n  var validateDate = function validateDate(value) {\n    if (props.yearNavigator) {\n      var viewYear = value.getFullYear();\n      var minRangeYear = props.yearRange ? parseInt(props.yearRange.split(':')[0], 10) : null;\n      var maxRangeYear = props.yearRange ? parseInt(props.yearRange.split(':')[1], 10) : null;\n      var minYear = props.minDate && minRangeYear != null ? Math.max(props.minDate.getFullYear(), minRangeYear) : props.minDate || minRangeYear;\n      var maxYear = props.maxDate && maxRangeYear != null ? Math.min(props.maxDate.getFullYear(), maxRangeYear) : props.maxDate || maxRangeYear;\n      if (minYear && minYear > viewYear) {\n        viewYear = minYear;\n      }\n      if (maxYear && maxYear < viewYear) {\n        viewYear = maxYear;\n      }\n      value.setFullYear(viewYear);\n    }\n    if (renderMonthsNavigator(0)) {\n      var viewMonth = value.getMonth();\n      var viewMonthWithMinMax = parseInt(isInMinYear(value) && Math.max(props.minDate.getMonth(), viewMonth).toString() || isInMaxYear(value) && Math.min(props.maxDate.getMonth(), viewMonth).toString() || viewMonth);\n      value.setMonth(viewMonthWithMinMax);\n    }\n  };\n  var updateTime = function updateTime(event, hour, minute, second, millisecond) {\n    var newDateTime = getCurrentDateTime();\n    newDateTime.setHours(hour);\n    newDateTime.setMinutes(minute);\n    newDateTime.setSeconds(second);\n    newDateTime.setMilliseconds(millisecond);\n    if (isMultipleSelection()) {\n      if (props.value && props.value.length) {\n        var value = _toConsumableArray(props.value);\n        value[value.length - 1] = newDateTime;\n        newDateTime = value;\n      } else {\n        newDateTime = [newDateTime];\n      }\n    } else if (isRangeSelection()) {\n      if (props.value && props.value.length) {\n        var startDate = props.value[0];\n        var endDate = props.value[1];\n        newDateTime = endDate ? [startDate, newDateTime] : [newDateTime, null];\n      } else {\n        newDateTime = [newDateTime, null];\n      }\n    }\n    updateModel(event, newDateTime);\n    if (props.onSelect) {\n      props.onSelect({\n        originalEvent: event,\n        value: newDateTime\n      });\n    }\n    updateInputfield(newDateTime);\n  };\n  var updateViewDate = function updateViewDate(event, value) {\n    validateDate(value);\n    if (props.onViewDateChange && event) {\n      props.onViewDateChange({\n        originalEvent: event,\n        value: value\n      });\n    } else {\n      viewStateChanged.current = true;\n      setViewDateState(value);\n    }\n    if (!value) {\n      onClearButtonClick(event);\n    }\n    if (value && props.onSelect) {\n      var day = value.getDate();\n      var month = value.getMonth();\n      var year = value.getFullYear();\n      onDateSelect(event, {\n        day: day,\n        month: month,\n        year: year,\n        selectable: isSelectable(day, month, year)\n      });\n    }\n  };\n  var setNavigationState = function setNavigationState(newViewDate) {\n    if (!newViewDate || !props.showMinMaxRange || props.view !== 'date' || !overlayRef.current) {\n      return;\n    }\n    var navPrev = DomHandler.findSingle(overlayRef.current, '[data-pc-section=\"previousbutton\"]');\n    var navNext = DomHandler.findSingle(overlayRef.current, '[data-pc-section=\"nextbutton\"]');\n    if (props.disabled) {\n      !isUnstyled() && DomHandler.addClass(navPrev, 'p-disabled');\n      navPrev.setAttribute('data-p-disabled', true);\n      !isUnstyled() && DomHandler.addClass(navNext, 'p-disabled');\n      navNext.setAttribute('data-p-disabled', true);\n      return;\n    }\n\n    // previous (check first day of month at 00:00:00)\n    if (props.minDate) {\n      var firstDayOfMonth = cloneDate(newViewDate);\n      if (firstDayOfMonth.getMonth() === 0) {\n        firstDayOfMonth.setMonth(11, 1);\n        firstDayOfMonth.setFullYear(firstDayOfMonth.getFullYear() - 1);\n      } else {\n        firstDayOfMonth.setMonth(firstDayOfMonth.getMonth(), 1);\n      }\n      firstDayOfMonth.setHours(0);\n      firstDayOfMonth.setMinutes(0);\n      firstDayOfMonth.setSeconds(0);\n      if (props.minDate > firstDayOfMonth) {\n        DomHandler.addClass(navPrev, 'p-disabled');\n      } else {\n        DomHandler.removeClass(navPrev, 'p-disabled');\n      }\n    }\n\n    // next (check last day of month at 11:59:59)\n    if (props.maxDate) {\n      var lastDayOfMonth = cloneDate(newViewDate);\n      if (lastDayOfMonth.getMonth() === 11) {\n        lastDayOfMonth.setMonth(0, 1);\n        lastDayOfMonth.setFullYear(lastDayOfMonth.getFullYear() + 1);\n      } else {\n        lastDayOfMonth.setMonth(lastDayOfMonth.getMonth() + 1, 1);\n      }\n      lastDayOfMonth.setHours(0);\n      lastDayOfMonth.setMinutes(0);\n      lastDayOfMonth.setSeconds(0);\n      lastDayOfMonth.setSeconds(-1);\n      if (props.maxDate < lastDayOfMonth) {\n        DomHandler.addClass(navNext, 'p-disabled');\n      } else {\n        DomHandler.removeClass(navNext, 'p-disabled');\n      }\n    }\n  };\n  var onDateCellKeydown = function onDateCellKeydown(event, date, groupIndex) {\n    var cellContent = event.currentTarget;\n    var cell = cellContent.parentElement;\n    var cellIndex = DomHandler.index(cell);\n    switch (event.code) {\n      case 'ArrowDown':\n        {\n          cellContent.tabIndex = '-1';\n          var nextRow = cell.parentElement.nextElementSibling;\n          if (nextRow) {\n            var tableRowIndex = DomHandler.index(cell.parentElement);\n            var tableRows = Array.from(cell.parentElement.parentElement.children);\n            var nextTableRows = tableRows.slice(tableRowIndex + 1);\n            var hasNextFocusableDate = nextTableRows.find(function (el) {\n              var focusCell = el.children[cellIndex].children[0];\n              return !DomHandler.getAttribute(focusCell, 'data-p-disabled');\n            });\n            if (hasNextFocusableDate) {\n              var focusCell = hasNextFocusableDate.children[cellIndex].children[0];\n              focusCell.tabIndex = '0';\n              focusCell.focus();\n            } else {\n              navigation.current = {\n                backward: false\n              };\n              navForward(event);\n            }\n          } else {\n            navigation.current = {\n              backward: false\n            };\n            navForward(event);\n          }\n          event.preventDefault();\n          break;\n        }\n      case 'ArrowUp':\n        {\n          cellContent.tabIndex = '-1';\n          if (event.altKey) {\n            hide(null, reFocusInputField);\n          } else {\n            var prevRow = cell.parentElement.previousElementSibling;\n            if (prevRow) {\n              var _tableRowIndex = DomHandler.index(cell.parentElement);\n              var _tableRows = Array.from(cell.parentElement.parentElement.children);\n              var prevTableRows = _tableRows.slice(0, _tableRowIndex).reverse();\n              var _hasNextFocusableDate = prevTableRows.find(function (el) {\n                var focusCell = el.children[cellIndex].children[0];\n                return !DomHandler.getAttribute(focusCell, 'data-p-disabled');\n              });\n              if (_hasNextFocusableDate) {\n                var _focusCell = _hasNextFocusableDate.children[cellIndex].children[0];\n                _focusCell.tabIndex = '0';\n                _focusCell.focus();\n              } else {\n                navigation.current = {\n                  backward: true\n                };\n                navBackward(event);\n              }\n            } else {\n              navigation.current = {\n                backward: true\n              };\n              navBackward(event);\n            }\n          }\n          event.preventDefault();\n          break;\n        }\n      case 'ArrowLeft':\n        {\n          cellContent.tabIndex = '-1';\n          var prevCell = cell.previousElementSibling;\n          if (prevCell) {\n            var cells = Array.from(cell.parentElement.children);\n            var prevCells = cells.slice(0, cellIndex).reverse();\n            var _hasNextFocusableDate2 = prevCells.find(function (el) {\n              var focusCell = el.children[0];\n              return !DomHandler.getAttribute(focusCell, 'data-p-disabled');\n            });\n            if (_hasNextFocusableDate2) {\n              var _focusCell2 = _hasNextFocusableDate2.children[0];\n              _focusCell2.tabIndex = '0';\n              _focusCell2.focus();\n            } else {\n              navigateToMonth(true, groupIndex, event);\n            }\n          } else {\n            navigateToMonth(true, groupIndex, event);\n          }\n          event.preventDefault();\n          break;\n        }\n      case 'ArrowRight':\n        {\n          cellContent.tabIndex = '-1';\n          var nextCell = cell.nextElementSibling;\n          if (nextCell) {\n            var _cells = Array.from(cell.parentElement.children);\n            var nextCells = _cells.slice(cellIndex + 1);\n            var _hasNextFocusableDate3 = nextCells.find(function (el) {\n              var focusCell = el.children[0];\n              return !DomHandler.getAttribute(focusCell, 'data-p-disabled');\n            });\n            if (_hasNextFocusableDate3) {\n              var _focusCell3 = _hasNextFocusableDate3.children[0];\n              _focusCell3.tabIndex = '0';\n              _focusCell3.focus();\n            } else {\n              navigateToMonth(false, groupIndex, event);\n            }\n          } else {\n            navigateToMonth(false, groupIndex, event);\n          }\n          event.preventDefault();\n          break;\n        }\n      case 'Enter':\n      case 'NumpadEnter':\n      case 'Space':\n        {\n          onDateSelect(event, date);\n          event.preventDefault();\n          break;\n        }\n      case 'Escape':\n        {\n          hide(null, reFocusInputField);\n          event.preventDefault();\n          break;\n        }\n      case 'Tab':\n        {\n          if (!props.inline) {\n            trapFocus(event);\n          }\n          break;\n        }\n      case 'Home':\n        {\n          cellContent.tabIndex = '-1';\n          var currentRow = cell.parentElement;\n          var _focusCell4 = currentRow.children[0].children[0];\n          if (DomHandler.getAttribute(_focusCell4, 'data-p-disabled')) {\n            navigateToMonth(groupIndex, true, event);\n          } else {\n            _focusCell4.tabIndex = '0';\n            _focusCell4.focus();\n          }\n          event.preventDefault();\n          break;\n        }\n      case 'End':\n        {\n          cellContent.tabIndex = '-1';\n          var _currentRow = cell.parentElement;\n          var _focusCell5 = _currentRow.children[_currentRow.children.length - 1].children[0];\n          if (DomHandler.getAttribute(_focusCell5, 'data-p-disabled')) {\n            navigateToMonth(groupIndex, false, event);\n          } else {\n            _focusCell5.tabIndex = '0';\n            _focusCell5.focus();\n          }\n          event.preventDefault();\n          break;\n        }\n      case 'PageUp':\n        {\n          cellContent.tabIndex = '-1';\n          if (event.shiftKey) {\n            navigation.current = {\n              backward: true\n            };\n            navBackward(event);\n          } else {\n            navigateToMonth(groupIndex, true, event);\n          }\n          event.preventDefault();\n          break;\n        }\n      case 'PageDown':\n        {\n          cellContent.tabIndex = '-1';\n          if (event.shiftKey) {\n            navigation.current = {\n              backward: false\n            };\n            navForward(event);\n          } else {\n            navigateToMonth(groupIndex, false, event);\n          }\n          event.preventDefault();\n          break;\n        }\n    }\n  };\n  var navigateToMonth = function navigateToMonth(prev, groupIndex, event) {\n    if (prev) {\n      if (props.numberOfMonths === 1 || groupIndex === 0) {\n        navigation.current = {\n          backward: true\n        };\n        navBackward(event);\n      } else {\n        var prevMonthContainer = overlayRef.current.children[groupIndex - 1];\n        var cells = DomHandler.find(prevMonthContainer, 'table td span:not([data-p-disabled=\"true\"])');\n        var focusCell = cells[cells.length - 1];\n        focusCell.tabIndex = '0';\n        focusCell.focus();\n      }\n    } else if (props.numberOfMonths === 1 || groupIndex === props.numberOfMonths - 1) {\n      navigation.current = {\n        backward: false\n      };\n      navForward(event);\n    } else {\n      var nextMonthContainer = overlayRef.current.children[groupIndex + 1];\n      var _focusCell6 = DomHandler.findSingle(nextMonthContainer, 'table td span:not([data-p-disabled=\"true\"])');\n      _focusCell6.tabIndex = '0';\n      _focusCell6.focus();\n    }\n  };\n  var onMonthCellKeydown = function onMonthCellKeydown(event, index) {\n    var cell = event.currentTarget;\n    switch (event.code) {\n      //arrows\n      case 'ArrowUp':\n      case 'ArrowDown':\n        {\n          cell.tabIndex = '-1';\n          var cells = cell.parentElement.children;\n          var cellIndex = DomHandler.index(cell);\n          var nextCell = cells[event.which === 40 ? cellIndex + 3 : cellIndex - 3];\n          if (nextCell) {\n            nextCell.tabIndex = '0';\n            nextCell.focus();\n          }\n          event.preventDefault();\n          break;\n        }\n      case 'ArrowLeft':\n        {\n          cell.tabIndex = '-1';\n          var prevCell = cell.previousElementSibling;\n          if (prevCell) {\n            prevCell.tabIndex = '0';\n            prevCell.focus();\n          } else {\n            navigation.current = {\n              backward: true\n            };\n            navBackward(event);\n          }\n          event.preventDefault();\n          break;\n        }\n      case 'ArrowRight':\n        {\n          cell.tabIndex = '-1';\n          var _nextCell = cell.nextElementSibling;\n          if (_nextCell) {\n            _nextCell.tabIndex = '0';\n            _nextCell.focus();\n          } else {\n            navigation.current = {\n              backward: false\n            };\n            navForward(event);\n          }\n          event.preventDefault();\n          break;\n        }\n      case 'PageUp':\n        {\n          if (event.shiftKey) {\n            return;\n          }\n          navigation.current = {\n            backward: true\n          };\n          navBackward(event);\n          break;\n        }\n      case 'PageDown':\n        {\n          if (event.shiftKey) {\n            return;\n          }\n          navigation.current = {\n            backward: false\n          };\n          navForward(event);\n          break;\n        }\n      case 'Enter':\n      case 'NumpadEnter':\n      case 'Space':\n        {\n          if (props.view !== 'month') {\n            viewChangedWithKeyDown.current = true;\n          }\n          onMonthSelect(event, index);\n          event.preventDefault();\n          break;\n        }\n      case 'Escape':\n        {\n          hide(null, reFocusInputField);\n          event.preventDefault();\n          break;\n        }\n      case 'Tab':\n        {\n          trapFocus(event);\n          break;\n        }\n    }\n  };\n  var onYearCellKeydown = function onYearCellKeydown(event, index) {\n    var cell = event.currentTarget;\n    switch (event.code) {\n      //arrows\n      case 'ArrowUp':\n      case 'ArrowDown':\n        {\n          cell.tabIndex = '-1';\n          var cells = cell.parentElement.children;\n          var cellIndex = DomHandler.index(cell);\n          var nextCell = cells[event.code === 'ArrowDown' ? cellIndex + 2 : cellIndex - 2];\n          if (nextCell) {\n            nextCell.tabIndex = '0';\n            nextCell.focus();\n          }\n          event.preventDefault();\n          break;\n        }\n      case 'ArrowLeft':\n        {\n          cell.tabIndex = '-1';\n          var prevCell = cell.previousElementSibling;\n          if (prevCell) {\n            prevCell.tabIndex = '0';\n            prevCell.focus();\n          } else {\n            navigation.current = {\n              backward: true\n            };\n            navBackward(event);\n          }\n          event.preventDefault();\n          break;\n        }\n      case 'ArrowRight':\n        {\n          cell.tabIndex = '-1';\n          var _nextCell2 = cell.nextElementSibling;\n          if (_nextCell2) {\n            _nextCell2.tabIndex = '0';\n            _nextCell2.focus();\n          } else {\n            navigation.current = {\n              backward: false\n            };\n            navForward(event);\n          }\n          event.preventDefault();\n          break;\n        }\n      case 'PageUp':\n        {\n          if (event.shiftKey) {\n            return;\n          }\n          navigation.current = {\n            backward: true\n          };\n          navBackward(event);\n          break;\n        }\n      case 'PageDown':\n        {\n          if (event.shiftKey) {\n            return;\n          }\n          navigation.current = {\n            backward: false\n          };\n          navForward(event);\n          break;\n        }\n      case 'Enter':\n      case 'NumpadEnter':\n      case 'Space':\n        {\n          if (props.view !== 'year') {\n            viewChangedWithKeyDown.current = true;\n          }\n          onYearSelect(event, index);\n          event.preventDefault();\n          break;\n        }\n      case 'Escape':\n        {\n          hide(null, reFocusInputField);\n          event.preventDefault();\n          break;\n        }\n      case 'Tab':\n        {\n          trapFocus(event);\n          break;\n        }\n    }\n  };\n  var onDateSelect = function onDateSelect(event, dateMeta, timeMeta) {\n    if (!event) {\n      return;\n    }\n    if (props.disabled || !dateMeta.selectable) {\n      event.preventDefault();\n      return;\n    }\n    DomHandler.find(overlayRef.current, 'table td span:not([data-p-disabled=\"true\"])').forEach(function (cell) {\n      return cell.tabIndex = -1;\n    });\n    event.currentTarget.focus();\n    if (isMultipleSelection()) {\n      if (isSelected(dateMeta)) {\n        var value = props.value.filter(function (date) {\n          return !isDateEquals(date, dateMeta);\n        });\n        updateModel(event, value);\n        updateInputfield(value);\n      } else if (!props.maxDateCount || !props.value || props.maxDateCount > props.value.length) {\n        selectDate(event, dateMeta, timeMeta);\n      }\n    } else {\n      selectDate(event, dateMeta, timeMeta);\n    }\n    if (!props.inline && isSingleSelection() && (!props.showTime || props.hideOnDateTimeSelect)) {\n      setTimeout(function () {\n        hide('dateselect');\n      }, 100);\n      if (touchUIMask.current) {\n        disableModality();\n      }\n    }\n    event.preventDefault();\n  };\n  var selectTime = function selectTime(date, timeMeta) {\n    if (props.showTime) {\n      var hours;\n      var minutes;\n      var seconds;\n      var milliseconds;\n      if (timeMeta) {\n        hours = timeMeta.hours;\n        minutes = timeMeta.minutes;\n        seconds = timeMeta.seconds;\n        milliseconds = timeMeta.milliseconds;\n      } else {\n        var time = getCurrentDateTime();\n        var _ref2 = [time.getHours(), time.getMinutes(), time.getSeconds(), time.getMilliseconds()];\n        hours = _ref2[0];\n        minutes = _ref2[1];\n        seconds = _ref2[2];\n        milliseconds = _ref2[3];\n      }\n      date.setHours(hours);\n      date.setMinutes(doStepMinute(minutes));\n      date.setSeconds(seconds);\n      date.setMilliseconds(milliseconds);\n    }\n  };\n  var selectDate = function selectDate(event, dateMeta, timeMeta) {\n    var date = new Date(dateMeta.year, dateMeta.month, dateMeta.day);\n    selectTime(date, timeMeta);\n    if (props.minDate && props.minDate > date) {\n      date = props.minDate;\n    }\n    if (props.maxDate && props.maxDate < date) {\n      date = props.maxDate;\n    }\n    var selectedValues = date;\n    if (isSingleSelection()) {\n      updateModel(event, date);\n    } else if (isMultipleSelection()) {\n      selectedValues = props.value ? [].concat(_toConsumableArray(props.value), [date]) : [date];\n      updateModel(event, selectedValues);\n    } else if (isRangeSelection()) {\n      if (props.value && props.value.length) {\n        var startDate = props.value[0];\n        var endDate = props.value[1];\n        if (!endDate) {\n          if (date.getTime() >= startDate.getTime()) {\n            endDate = date;\n          } else {\n            endDate = startDate;\n            startDate = date;\n          }\n        } else {\n          startDate = date;\n          endDate = null;\n        }\n        selectedValues = [startDate, endDate];\n        updateModel(event, selectedValues);\n        if (props.hideOnRangeSelection && endDate !== null) {\n          setTimeout(function () {\n            setOverlayVisibleState(false);\n          }, 150);\n        }\n      } else {\n        selectedValues = [date, null];\n        updateModel(event, selectedValues);\n      }\n    }\n    if (props.onSelect) {\n      props.onSelect({\n        originalEvent: event,\n        value: date\n      });\n    }\n    updateInputfield(selectedValues);\n  };\n  var decrementDecade = function decrementDecade() {\n    var _currentYear = currentYear - 10;\n    setCurrentYear(_currentYear);\n    return _currentYear;\n  };\n  var incrementDecade = function incrementDecade() {\n    var _currentYear = currentYear + 10;\n    setCurrentYear(_currentYear);\n    return _currentYear;\n  };\n  var switchToMonthView = function switchToMonthView(event) {\n    if (event && event.code && (event.code === 'Enter' || event.code === 'NumpadEnter' || event.code === 'Space')) {\n      viewChangedWithKeyDown.current = true;\n    }\n    setCurrentView('month');\n    event.preventDefault();\n  };\n  var switchToYearView = function switchToYearView(event) {\n    if (event && event.code && (event.code === 'Enter' || event.code === 'NumpadEnter' || event.code === 'Space')) {\n      viewChangedWithKeyDown.current = true;\n    }\n    setCurrentView('year');\n    event.preventDefault();\n  };\n  var onMonthSelect = function onMonthSelect(event, month) {\n    if (props.view === 'month') {\n      onDateSelect(event, {\n        year: currentYear,\n        month: month,\n        day: 1,\n        selectable: true\n      });\n      event.preventDefault();\n    } else {\n      setCurrentMonth(month);\n      createMonthsMeta(month, currentYear);\n      var currentDate = cloneDate(getCurrentDateTime());\n      currentDate.setDate(1); // #2948 always set to 1st of month\n      currentDate.setMonth(month);\n      currentDate.setYear(currentYear);\n      setViewDateState(currentDate);\n      setCurrentView('date');\n      props.onMonthChange && props.onMonthChange({\n        month: month + 1,\n        year: currentYear\n      });\n      updateViewDate(event, currentDate);\n    }\n  };\n  var onYearSelect = function onYearSelect(event, year) {\n    if (props.view === 'year') {\n      onDateSelect(event, {\n        year: year,\n        month: 0,\n        day: 1,\n        selectable: true\n      });\n    } else {\n      setCurrentYear(year);\n      setCurrentView('month');\n      props.onMonthChange && props.onMonthChange({\n        month: currentMonth + 1,\n        year: year\n      });\n    }\n  };\n  var updateModel = function updateModel(event, value) {\n    if (props.onChange) {\n      var newValue = cloneDate(value);\n      viewStateChanged.current = true;\n      onChangeRef.current({\n        originalEvent: event,\n        value: newValue,\n        stopPropagation: function stopPropagation() {\n          event === null || event === void 0 || event.stopPropagation();\n        },\n        preventDefault: function preventDefault() {\n          event === null || event === void 0 || event.preventDefault();\n        },\n        target: {\n          name: props.name,\n          id: props.id,\n          value: newValue\n        }\n      });\n    }\n  };\n  var show = function show(type) {\n    if (props.onVisibleChange) {\n      props.onVisibleChange({\n        visible: true,\n        type: type\n      });\n    } else {\n      setOverlayVisibleState(true);\n      overlayEventListener.current = function (e) {\n        if (!isOutsideClicked(e)) {\n          isOverlayClicked.current = true;\n        }\n      };\n      OverlayService.on('overlay-click', overlayEventListener.current);\n    }\n  };\n  var hide = function hide(type, callback) {\n    var _hideCallback = function _hideCallback() {\n      viewStateChanged.current = false;\n      ignoreFocusFunctionality.current = false;\n      isOverlayClicked.current = false;\n      callback && callback();\n      OverlayService.off('overlay-click', overlayEventListener.current);\n      overlayEventListener.current = null;\n    };\n    props.touchUI && disableModality();\n    if (props.onVisibleChange) {\n      props.onVisibleChange({\n        visible: type !== 'dateselect',\n        // false only if selecting a value to close panel\n        type: type,\n        callback: _hideCallback\n      });\n    } else {\n      setOverlayVisibleState(false);\n      _hideCallback();\n    }\n  };\n  var onOverlayEnter = function onOverlayEnter() {\n    var styles = props.touchUI ? {\n      position: 'fixed',\n      top: '50%',\n      left: '50%',\n      transform: 'translate(-50%, -50%)'\n    } : !props.inline ? {\n      position: 'absolute',\n      top: '0',\n      left: '0'\n    } : undefined;\n    DomHandler.addStyles(overlayRef.current, styles);\n    if (props.autoZIndex) {\n      var key = props.touchUI ? 'modal' : 'overlay';\n      ZIndexUtils.set(key, overlayRef.current, context && context.autoZIndex || PrimeReact.autoZIndex, props.baseZIndex || context && context.zIndex[key] || PrimeReact.zIndex[key]);\n    }\n    if (!props.touchUI && overlayRef && overlayRef.current && inputRef && inputRef.current && !appendDisabled()) {\n      var inputWidth = DomHandler.getOuterWidth(inputRef.current);\n\n      // #5435 must have reasonable width if input is too small\n      if (inputWidth < 220) {\n        inputWidth = 220;\n      }\n      if (props.view === 'date') {\n        overlayRef.current.style.width = DomHandler.getOuterWidth(overlayRef.current) + 'px';\n      } else {\n        overlayRef.current.style.width = inputWidth + 'px';\n      }\n\n      // #5830 Tailwind does not need a min width it breaks the styling\n      if (!isUnstyled()) {\n        overlayRef.current.style.minWidth = inputWidth + 'px';\n      }\n    }\n    alignOverlay();\n  };\n  var onOverlayEntered = function onOverlayEntered() {\n    bindOverlayListener();\n    props.onShow && props.onShow();\n    setFocusedState(false);\n  };\n  var onOverlayExit = function onOverlayExit() {\n    unbindOverlayListener();\n  };\n  var onOverlayExited = function onOverlayExited() {\n    ZIndexUtils.clear(overlayRef.current);\n    props.onHide && props.onHide();\n  };\n  var appendDisabled = function appendDisabled() {\n    var appendTo = props.appendTo || context && context.appendTo || PrimeReact.appendTo;\n    return appendTo === 'self' || props.inline;\n  };\n  var alignOverlay = function alignOverlay() {\n    if (props.touchUI) {\n      enableModality();\n    } else if (overlayRef && overlayRef.current && inputRef && inputRef.current) {\n      DomHandler.alignOverlay(overlayRef.current, inputRef.current, props.appendTo || context && context.appendTo || PrimeReact.appendTo);\n      if (appendDisabled()) {\n        DomHandler.relativePosition(overlayRef.current, inputRef.current);\n      } else {\n        DomHandler.absolutePosition(overlayRef.current, inputRef.current);\n      }\n    }\n  };\n  var enableModality = function enableModality() {\n    if (!touchUIMask.current) {\n      touchUIMask.current = document.createElement('div');\n      touchUIMask.current.style.zIndex = String(ZIndexUtils.get(overlayRef.current) - 1);\n      !isUnstyled() && DomHandler.addMultipleClasses(touchUIMask.current, 'p-component-overlay p-datepicker-mask p-datepicker-mask-scrollblocker p-component-overlay-enter');\n      touchUIMaskClickListener.current = function () {\n        disableModality();\n        hide();\n      };\n      touchUIMask.current.addEventListener('click', touchUIMaskClickListener.current);\n      document.body.appendChild(touchUIMask.current);\n      DomHandler.blockBodyScroll();\n    }\n  };\n  var disableModality = function disableModality() {\n    if (touchUIMask.current) {\n      if (isUnstyled) {\n        destroyMask();\n      } else {\n        !isUnstyled() && DomHandler.addClass(touchUIMask.current, 'p-component-overlay-leave');\n        if (DomHandler.hasCSSAnimation(touchUIMask.current) > 0) {\n          touchUIMask.current.addEventListener('animationend', function () {\n            destroyMask();\n          });\n        } else {\n          destroyMask();\n        }\n      }\n    }\n  };\n  var destroyMask = function destroyMask() {\n    if (touchUIMask.current) {\n      touchUIMask.current.removeEventListener('click', touchUIMaskClickListener.current);\n      touchUIMaskClickListener.current = null;\n      document.body.removeChild(touchUIMask.current);\n      touchUIMask.current = null;\n    }\n    var bodyChildren = document.body.children;\n    var hasBlockerMasks;\n    for (var i = 0; i < bodyChildren.length; i++) {\n      var bodyChild = bodyChildren[i];\n      if (DomHandler.hasClass(bodyChild, 'p-datepicker-mask-scrollblocker')) {\n        hasBlockerMasks = true;\n        break;\n      }\n    }\n    if (!hasBlockerMasks) {\n      DomHandler.unblockBodyScroll();\n    }\n  };\n  var isOutsideClicked = function isOutsideClicked(event) {\n    return elementRef.current && !(elementRef.current.isSameNode(event.target) || isNavIconClicked(event.target) || elementRef.current.contains(event.target) || overlayRef.current && overlayRef.current.contains(event.target));\n  };\n  var isNavIconClicked = function isNavIconClicked(target) {\n    return previousButton.current && (previousButton.current.isSameNode(target) || previousButton.current.contains(target)) || nextButton.current && (nextButton.current.isSameNode(target) || nextButton.current.contains(target));\n  };\n  var getFirstDayOfMonthIndex = function getFirstDayOfMonthIndex(month, year) {\n    var day = new Date();\n    day.setDate(1);\n    day.setMonth(month);\n    day.setFullYear(year);\n    var dayIndex = day.getDay() + getSundayIndex();\n    return dayIndex >= 7 ? dayIndex - 7 : dayIndex;\n  };\n  var getDaysCountInMonth = function getDaysCountInMonth(month, year) {\n    return 32 - daylightSavingAdjust(new Date(year, month, 32)).getDate();\n  };\n  var getDaysCountInPrevMonth = function getDaysCountInPrevMonth(month, year) {\n    var prev = getPreviousMonthAndYear(month, year);\n    return getDaysCountInMonth(prev.month, prev.year);\n  };\n  var daylightSavingAdjust = function daylightSavingAdjust(date) {\n    if (!date) {\n      return null;\n    }\n    date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n    return date;\n  };\n  var getPreviousMonthAndYear = function getPreviousMonthAndYear(month, year) {\n    var m;\n    var y;\n    if (month === 0) {\n      m = 11;\n      y = year - 1;\n    } else {\n      m = month - 1;\n      y = year;\n    }\n    return {\n      month: m,\n      year: y\n    };\n  };\n  var getNextMonthAndYear = function getNextMonthAndYear(month, year) {\n    var m;\n    var y;\n    if (month === 11) {\n      m = 0;\n      y = year + 1;\n    } else {\n      m = month + 1;\n      y = year;\n    }\n    return {\n      month: m,\n      year: y\n    };\n  };\n  var getSundayIndex = function getSundayIndex() {\n    var firstDayOfWeek = localeOption('firstDayOfWeek', props.locale);\n    return firstDayOfWeek > 0 ? 7 - firstDayOfWeek : 0;\n  };\n  var createWeekDaysMeta = function createWeekDaysMeta() {\n    var weekDays = [];\n    var _localeOptions = localeOptions(props.locale),\n      dayIndex = _localeOptions.firstDayOfWeek,\n      dayNamesMin = _localeOptions.dayNamesMin;\n    for (var i = 0; i < 7; i++) {\n      weekDays.push(dayNamesMin[dayIndex]);\n      dayIndex = dayIndex === 6 ? 0 : ++dayIndex;\n    }\n    return weekDays;\n  };\n  var createMonthsMeta = function createMonthsMeta(month, year) {\n    var months = [];\n    for (var i = 0; i < props.numberOfMonths; i++) {\n      var m = month + i;\n      var y = year;\n      if (m > 11) {\n        m = m % 11 - 1;\n        y = year + 1;\n      }\n      months.push(createMonthMeta(m, y));\n    }\n    return months;\n  };\n  var createMonthMeta = function createMonthMeta(month, year) {\n    var dates = [];\n    var firstDay = getFirstDayOfMonthIndex(month, year);\n    var daysLength = getDaysCountInMonth(month, year);\n    var prevMonthDaysLength = getDaysCountInPrevMonth(month, year);\n    var dayNo = 1;\n    var today = new Date();\n    var weekNumbers = [];\n    var monthRows = Math.ceil((daysLength + firstDay) / 7);\n    for (var i = 0; i < monthRows; i++) {\n      var week = [];\n      if (i === 0) {\n        for (var j = prevMonthDaysLength - firstDay + 1; j <= prevMonthDaysLength; j++) {\n          var prev = getPreviousMonthAndYear(month, year);\n          week.push({\n            day: j,\n            month: prev.month,\n            year: prev.year,\n            otherMonth: true,\n            today: isToday(today, j, prev.month, prev.year),\n            selectable: isSelectable(j, prev.month, prev.year, true)\n          });\n        }\n        var remainingDaysLength = 7 - week.length;\n        for (var _j = 0; _j < remainingDaysLength; _j++) {\n          week.push({\n            day: dayNo,\n            month: month,\n            year: year,\n            today: isToday(today, dayNo, month, year),\n            selectable: isSelectable(dayNo, month, year, false)\n          });\n          dayNo++;\n        }\n      } else {\n        for (var _j2 = 0; _j2 < 7; _j2++) {\n          if (dayNo > daysLength) {\n            var next = getNextMonthAndYear(month, year);\n            week.push({\n              day: dayNo - daysLength,\n              month: next.month,\n              year: next.year,\n              otherMonth: true,\n              today: isToday(today, dayNo - daysLength, next.month, next.year),\n              selectable: isSelectable(dayNo - daysLength, next.month, next.year, true)\n            });\n          } else {\n            week.push({\n              day: dayNo,\n              month: month,\n              year: year,\n              today: isToday(today, dayNo, month, year),\n              selectable: isSelectable(dayNo, month, year, false)\n            });\n          }\n          dayNo++;\n        }\n      }\n      if (props.showWeek) {\n        weekNumbers.push(getWeekNumber(new Date(week[0].year, week[0].month, week[0].day)));\n      }\n      dates.push(week);\n    }\n    return {\n      month: month,\n      year: year,\n      dates: dates,\n      weekNumbers: weekNumbers\n    };\n  };\n  var getWeekNumber = function getWeekNumber(date) {\n    var checkDate = cloneDate(date);\n    checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7));\n    var time = checkDate.getTime();\n    checkDate.setMonth(0);\n    checkDate.setDate(1);\n    return Math.floor(Math.round((time - checkDate.getTime()) / 86400000) / 7) + 1;\n  };\n  var isSelectable = function isSelectable(day, month, year, otherMonth) {\n    var validMin = true;\n    var validMax = true;\n    var validDate = true;\n    var validDay = true;\n    var validMonth = true;\n    if (props.minDate) {\n      if (props.minDate.getFullYear() > year) {\n        validMin = false;\n      } else if (props.minDate.getFullYear() === year) {\n        if (month > -1 && props.minDate.getMonth() > month) {\n          validMin = false;\n        } else if (month > -1 && props.minDate.getMonth() === month) {\n          if (day > 0 && props.minDate.getDate() > day) {\n            validMin = false;\n          }\n        }\n      }\n    }\n    if (props.maxDate) {\n      if (props.maxDate.getFullYear() < year) {\n        validMax = false;\n      } else if (props.maxDate.getFullYear() === year) {\n        if (month > -1 && props.maxDate.getMonth() < month) {\n          validMax = false;\n        } else if (month > -1 && props.maxDate.getMonth() === month) {\n          if (day > 0 && props.maxDate.getDate() < day) {\n            validMax = false;\n          }\n        }\n      }\n    }\n    if (props.disabledDates || props.enabledDates || props.disabledDays) {\n      validDay = !isDayDisabled(day, month, year);\n    }\n    if (props.selectOtherMonths === false && otherMonth) {\n      validMonth = false;\n    }\n    return validMin && validMax && validDate && validDay && validMonth;\n  };\n  var isSelectableTime = function isSelectableTime(value) {\n    var validMin = true;\n    var validMax = true;\n    if (props.minDate && props.minDate.toDateString() === value.toDateString()) {\n      if (props.minDate.getHours() > value.getHours()) {\n        validMin = false;\n      } else if (props.minDate.getHours() === value.getHours()) {\n        if (props.minDate.getMinutes() > value.getMinutes()) {\n          validMin = false;\n        } else if (props.minDate.getMinutes() === value.getMinutes()) {\n          if (props.minDate.getSeconds() > value.getSeconds()) {\n            validMin = false;\n          } else if (props.minDate.getSeconds() === value.getSeconds()) {\n            if (props.minDate.getMilliseconds() > value.getMilliseconds()) {\n              validMin = false;\n            }\n          }\n        }\n      }\n    }\n    if (props.maxDate && props.maxDate.toDateString() === value.toDateString()) {\n      if (props.maxDate.getHours() < value.getHours()) {\n        validMax = false;\n      } else if (props.maxDate.getHours() === value.getHours()) {\n        if (props.maxDate.getMinutes() < value.getMinutes()) {\n          validMax = false;\n        } else if (props.maxDate.getMinutes() === value.getMinutes()) {\n          if (props.maxDate.getSeconds() < value.getSeconds()) {\n            validMax = false;\n          } else if (props.maxDate.getSeconds() === value.getSeconds()) {\n            if (props.maxDate.getMilliseconds() < value.getMilliseconds()) {\n              validMax = false;\n            }\n          }\n        }\n      }\n    }\n    return validMin && validMax;\n  };\n  var isSelected = function isSelected(dateMeta) {\n    if (props.value) {\n      if (isSingleSelection()) {\n        return isDateEquals(props.value, dateMeta);\n      } else if (isMultipleSelection()) {\n        var selected = false;\n        var _iterator = _createForOfIteratorHelper(props.value),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var date = _step.value;\n            selected = isDateEquals(date, dateMeta);\n            if (selected) {\n              break;\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n        return selected;\n      } else if (isRangeSelection()) {\n        if (props.value[1]) {\n          return isDateEquals(props.value[0], dateMeta) || isDateEquals(props.value[1], dateMeta) || isDateBetween(props.value[0], props.value[1], dateMeta);\n        }\n        return isDateEquals(props.value[0], dateMeta);\n      }\n    } else {\n      return false;\n    }\n  };\n  var isComparable = function isComparable() {\n    return props.value != null && typeof props.value !== 'string';\n  };\n  var isMonthSelected = function isMonthSelected(month) {\n    if (!isComparable()) return false;\n    if (isMultipleSelection()) {\n      return props.value.some(function (v) {\n        return v.getMonth() === month && v.getFullYear() === currentYear;\n      });\n    } else if (isRangeSelection()) {\n      var _props$value = _slicedToArray(props.value, 2),\n        start = _props$value[0],\n        end = _props$value[1];\n      var startYear = start ? start.getFullYear() : null;\n      var endYear = end ? end.getFullYear() : null;\n      var startMonth = start ? start.getMonth() : null;\n      var endMonth = end ? end.getMonth() : null;\n      if (!end) {\n        return startYear === currentYear && startMonth === month;\n      } else {\n        var currentDate = new Date(currentYear, month, 1);\n        var startDate = new Date(startYear, startMonth, 1);\n        var endDate = new Date(endYear, endMonth, 1);\n        return currentDate >= startDate && currentDate <= endDate;\n      }\n    } else {\n      return props.value.getMonth() === month && props.value.getFullYear() === currentYear;\n    }\n  };\n  var isYearSelected = function isYearSelected(year) {\n    if (!isComparable()) return false;\n    if (isMultipleSelection()) {\n      return props.value.some(function (v) {\n        return v.getFullYear() === year;\n      });\n    } else if (isRangeSelection()) {\n      var start = props.value[0] ? props.value[0].getFullYear() : null;\n      var end = props.value[1] ? props.value[1].getFullYear() : null;\n      return start === year || end === year || start < year && end > year;\n    } else {\n      return props.value.getFullYear() === year;\n    }\n  };\n  var switchViewButtonDisabled = function switchViewButtonDisabled() {\n    return props.numberOfMonths > 1 || props.disabled;\n  };\n  var isDateEquals = function isDateEquals(value, dateMeta) {\n    if (value && value instanceof Date) {\n      return value.getDate() === dateMeta.day && value.getMonth() === dateMeta.month && value.getFullYear() === dateMeta.year;\n    }\n    return false;\n  };\n  var isDateBetween = function isDateBetween(start, end, dateMeta) {\n    var between = false;\n    if (start && end) {\n      var date = new Date(dateMeta.year, dateMeta.month, dateMeta.day);\n      return start.getTime() <= date.getTime() && end.getTime() >= date.getTime();\n    }\n    return between;\n  };\n  var isSingleSelection = function isSingleSelection() {\n    return props.selectionMode === 'single';\n  };\n  var isRangeSelection = function isRangeSelection() {\n    return props.selectionMode === 'range';\n  };\n  var isMultipleSelection = function isMultipleSelection() {\n    return props.selectionMode === 'multiple';\n  };\n  var isToday = function isToday(today, day, month, year) {\n    return today.getDate() === day && today.getMonth() === month && today.getFullYear() === year;\n  };\n  var isDayDisabled = function isDayDisabled(day, month, year) {\n    var isDisabled = false;\n\n    // first check for disabled dates\n    if (props.disabledDates) {\n      if (props.disabledDates.some(function (d) {\n        return d.getFullYear() === year && d.getMonth() === month && d.getDate() === day;\n      })) {\n        isDisabled = true;\n      }\n    }\n\n    // next if not disabled then check for disabled days\n    if (!isDisabled && props.disabledDays && currentView === 'date') {\n      var weekday = new Date(year, month, day);\n      var weekdayNumber = weekday.getDay();\n      if (props.disabledDays.indexOf(weekdayNumber) !== -1) {\n        isDisabled = true;\n      }\n    }\n\n    // last check for enabled dates to force dates enabled\n    if (props.enabledDates) {\n      var isEnabled = props.enabledDates.some(function (d) {\n        return d.getFullYear() === year && d.getMonth() === month && d.getDate() === day;\n      });\n      if (isEnabled) {\n        isDisabled = false;\n      } else if (!props.disabledDays && !props.disabledDates) {\n        // disable other dates when only enabledDates are present\n        isDisabled = true;\n      }\n    }\n    return isDisabled;\n  };\n  var isMonthYearDisabled = function isMonthYearDisabled(month, year) {\n    var daysCountInAllMonth = month === -1 ? new Array(12).fill(0).map(function (_, i) {\n      return getDaysCountInMonth(i, year);\n    }) : [getDaysCountInMonth(month, year)];\n    for (var i = 0; i < daysCountInAllMonth.length; i++) {\n      var monthDays = daysCountInAllMonth[i];\n      var _month = month === -1 ? i : month;\n      for (var day = 1; day <= monthDays; day++) {\n        var isDateSelectable = isSelectable(day, _month, year);\n        if (isDateSelectable) {\n          return false;\n        }\n      }\n    }\n    return true;\n  };\n  var updateInputfield = function updateInputfield(value) {\n    if (!inputRef.current) {\n      return;\n    }\n    var formattedValue = '';\n    if (value) {\n      try {\n        if (isSingleSelection()) {\n          formattedValue = isValidDate(value) ? formatDateTime(value) : props.keepInvalid ? value : '';\n        } else if (isMultipleSelection()) {\n          for (var i = 0; i < value.length; i++) {\n            var selectedValue = value[i];\n            var dateAsString = isValidDate(selectedValue) ? formatDateTime(selectedValue) : '';\n            formattedValue = formattedValue + dateAsString;\n            if (i !== value.length - 1) {\n              formattedValue = formattedValue + ', ';\n            }\n          }\n        } else if (isRangeSelection()) {\n          if (value && value.length) {\n            var startDate = value[0];\n            var endDate = value[1];\n            formattedValue = isValidDate(startDate) ? formatDateTime(startDate) : '';\n            if (endDate) {\n              formattedValue = formattedValue + (isValidDate(endDate) ? ' - ' + formatDateTime(endDate) : '');\n            }\n          }\n        }\n      } catch (err) {\n        formattedValue = value;\n      }\n    }\n    inputRef.current.value = formattedValue;\n  };\n  var formatDateTime = function formatDateTime(date) {\n    if (props.formatDateTime) {\n      return props.formatDateTime(date);\n    }\n    var formattedValue = null;\n    if (date) {\n      if (props.timeOnly) {\n        formattedValue = formatTime(date);\n      } else {\n        formattedValue = formatDate(date, getDateFormat());\n        if (props.showTime) {\n          formattedValue = formattedValue + (' ' + formatTime(date));\n        }\n      }\n    }\n    return formattedValue;\n  };\n  var formatDate = function formatDate(date, format) {\n    if (!date) {\n      return '';\n    }\n    var iFormat;\n    var lookAhead = function lookAhead(match) {\n      var matches = iFormat + 1 < format.length && format.charAt(iFormat + 1) === match;\n      if (matches) {\n        iFormat++;\n      }\n      return matches;\n    };\n    var formatNumber = function formatNumber(match, value, len) {\n      var num = '' + value;\n      if (lookAhead(match)) {\n        while (num.length < len) {\n          num = '0' + num;\n        }\n      }\n      return num;\n    };\n    var formatName = function formatName(match, value, shortNames, longNames) {\n      return lookAhead(match) ? longNames[value] : shortNames[value];\n    };\n    var output = '';\n    var literal = false;\n    var _localeOptions2 = localeOptions(props.locale),\n      dayNamesShort = _localeOptions2.dayNamesShort,\n      dayNames = _localeOptions2.dayNames,\n      monthNamesShort = _localeOptions2.monthNamesShort,\n      monthNames = _localeOptions2.monthNames;\n    if (date) {\n      for (iFormat = 0; iFormat < format.length; iFormat++) {\n        if (literal) {\n          if (format.charAt(iFormat) === \"'\" && !lookAhead(\"'\")) {\n            literal = false;\n          } else {\n            output = output + format.charAt(iFormat);\n          }\n        } else {\n          switch (format.charAt(iFormat)) {\n            case 'd':\n              output = output + formatNumber('d', date.getDate(), 2);\n              break;\n            case 'D':\n              output = output + formatName('D', date.getDay(), dayNamesShort, dayNames);\n              break;\n            case 'o':\n              output = output + formatNumber('o', Math.round((new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime() - new Date(date.getFullYear(), 0, 0).getTime()) / 86400000), 3);\n              break;\n            case 'm':\n              output = output + formatNumber('m', date.getMonth() + 1, 2);\n              break;\n            case 'M':\n              output = output + formatName('M', date.getMonth(), monthNamesShort, monthNames);\n              break;\n            case 'y':\n              output = output + (lookAhead('y') ? date.getFullYear() : (date.getFullYear() % 100 < 10 ? '0' : '') + date.getFullYear() % 100);\n              break;\n            case '@':\n              output = output + date.getTime();\n              break;\n            case '!':\n              output = output + (date.getTime() * 10000 + ticksTo1970);\n              break;\n            case \"'\":\n              if (lookAhead(\"'\")) {\n                output = output + \"'\";\n              } else {\n                literal = true;\n              }\n              break;\n            default:\n              output = output + format.charAt(iFormat);\n          }\n        }\n      }\n    }\n    return output;\n  };\n  var formatTime = function formatTime(date) {\n    if (!date) {\n      return '';\n    }\n    var output = '';\n    var hours = date.getHours();\n    var minutes = date.getMinutes();\n    var seconds = date.getSeconds();\n    var milliseconds = date.getMilliseconds();\n    if (props.hourFormat === '12' && hours > 11 && hours !== 12) {\n      hours = hours - 12;\n    }\n    if (props.hourFormat === '12') {\n      output = output + (hours === 0 ? 12 : hours < 10 ? '0' + hours : hours);\n    } else {\n      output = output + (hours < 10 ? '0' + hours : hours);\n    }\n    output = output + ':';\n    output = output + (minutes < 10 ? '0' + minutes : minutes);\n    if (props.showSeconds) {\n      output = output + ':';\n      output = output + (seconds < 10 ? '0' + seconds : seconds);\n    }\n    if (props.showMillisec) {\n      output = output + '.';\n      output = output + (milliseconds < 100 ? (milliseconds < 10 ? '00' : '0') + milliseconds : milliseconds);\n    }\n    if (props.hourFormat === '12') {\n      output = output + (date.getHours() > 11 ? ' PM' : ' AM');\n    }\n    return output;\n  };\n  var parseValueFromString = function parseValueFromString(text) {\n    if (!text || text.trim().length === 0) {\n      return null;\n    }\n    var value;\n    if (isSingleSelection()) {\n      value = parseDateTime(text);\n    } else if (isMultipleSelection()) {\n      var tokens = text.split(',');\n      value = [];\n      var _iterator2 = _createForOfIteratorHelper(tokens),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var token = _step2.value;\n          value.push(parseDateTime(token.trim()));\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    } else if (isRangeSelection()) {\n      var _tokens = text.split(' - ');\n      value = [];\n      for (var i = 0; i < _tokens.length; i++) {\n        value[i] = parseDateTime(_tokens[i].trim());\n      }\n    }\n    return value;\n  };\n  var parseDateTime = function parseDateTime(text) {\n    if (props.parseDateTime) {\n      return props.parseDateTime(text);\n    }\n    var date;\n    var parts = text.split(' ');\n    if (props.timeOnly) {\n      date = new Date();\n      populateTime(date, parts[0], parts[1]);\n    } else if (props.showTime) {\n      date = parseDate(parts[0], getDateFormat());\n      populateTime(date, parts[1], parts[2]);\n    } else {\n      date = parseDate(text, getDateFormat());\n    }\n    return date;\n  };\n  var populateTime = function populateTime(value, timeString, ampm) {\n    if (props.hourFormat === '12' && ampm !== 'PM' && ampm !== 'AM') {\n      throw new Error('Invalid Time');\n    }\n    var time = parseTime(timeString, ampm);\n    value.setHours(time.hour);\n    value.setMinutes(time.minute);\n    value.setSeconds(time.second);\n    value.setMilliseconds(time.millisecond);\n  };\n  var parseTime = function parseTime(value, ampm) {\n    value = props.showMillisec ? value.replace('.', ':') : value;\n    var tokens = value.split(':');\n    var validTokenLength = props.showSeconds ? 3 : 2;\n    validTokenLength = props.showMillisec ? validTokenLength + 1 : validTokenLength;\n    if (tokens.length !== validTokenLength || tokens[0].length !== 2 || tokens[1].length !== 2 || props.showSeconds && tokens[2].length !== 2 || props.showMillisec && tokens[3].length !== 3) {\n      throw new Error('Invalid time');\n    }\n    var h = parseInt(tokens[0], 10);\n    var m = parseInt(tokens[1], 10);\n    var s = props.showSeconds ? parseInt(tokens[2], 10) : null;\n    var ms = props.showMillisec ? parseInt(tokens[3], 10) : null;\n    if (isNaN(h) || isNaN(m) || h > 23 || m > 59 || props.hourFormat === '12' && h > 12 || props.showSeconds && (isNaN(s) || s > 59) || props.showMillisec && (isNaN(s) || s > 1000)) {\n      throw new Error('Invalid time');\n    } else {\n      if (props.hourFormat === '12') {\n        if (h !== 12 && ampm === 'PM') {\n          h = h + 12;\n        }\n        if (h === 12 && ampm === 'AM') {\n          h = h - 12;\n        }\n      }\n      return {\n        hour: h,\n        minute: m,\n        second: s,\n        millisecond: ms\n      };\n    }\n  };\n\n  // Ported from jquery-ui datepicker parseDate\n  var parseDate = function parseDate(value, format) {\n    if (format == null || value == null) {\n      throw new Error('Invalid arguments');\n    }\n    value = _typeof(value) === 'object' ? value.toString() : value + '';\n    if (value === '') {\n      return null;\n    }\n    var iFormat;\n    var dim;\n    var extra;\n    var iValue = 0;\n    var shortYearCutoff = typeof props.shortYearCutoff !== 'string' ? props.shortYearCutoff : new Date().getFullYear() % 100 + parseInt(props.shortYearCutoff, 10);\n    var year = -1;\n    var month = -1;\n    var day = -1;\n    var doy = -1;\n    var literal = false;\n    var date;\n    var lookAhead = function lookAhead(match) {\n      var matches = iFormat + 1 < format.length && format.charAt(iFormat + 1) === match;\n      if (matches) {\n        iFormat++;\n      }\n      return matches;\n    };\n    var getNumber = function getNumber(match) {\n      var isDoubled = lookAhead(match);\n      var size = match === '@' ? 14 : match === '!' ? 20 : match === 'y' && isDoubled ? 4 : match === 'o' ? 3 : 2;\n      var minSize = match === 'y' ? size : 1;\n      var digits = new RegExp('^\\\\d{' + minSize + ',' + size + '}');\n      var num = value.substring(iValue).match(digits);\n      if (!num) {\n        throw new Error('Missing number at position ' + iValue);\n      }\n      iValue = iValue + num[0].length;\n      return parseInt(num[0], 10);\n    };\n    var getName = function getName(match, shortNames, longNames) {\n      var index = -1;\n      var arr = lookAhead(match) ? longNames : shortNames;\n      var names = [];\n      for (var i = 0; i < arr.length; i++) {\n        names.push([i, arr[i]]);\n      }\n      names.sort(function (a, b) {\n        return -(a[1].length - b[1].length);\n      });\n      for (var _i = 0; _i < names.length; _i++) {\n        var name = names[_i][1];\n        if (value.substr(iValue, name.length).toLowerCase() === name.toLowerCase()) {\n          index = names[_i][0];\n          iValue = iValue + name.length;\n          break;\n        }\n      }\n      if (index !== -1) {\n        return index + 1;\n      }\n      throw new Error('Unknown name at position ' + iValue);\n    };\n    var checkLiteral = function checkLiteral() {\n      if (value.charAt(iValue) !== format.charAt(iFormat)) {\n        throw new Error('Unexpected literal at position ' + iValue);\n      }\n      iValue++;\n    };\n    if (props.view === 'month') {\n      day = 1;\n    }\n    if (props.view === 'year') {\n      day = 1;\n      month = 1;\n    }\n    var _localeOptions3 = localeOptions(props.locale),\n      dayNamesShort = _localeOptions3.dayNamesShort,\n      dayNames = _localeOptions3.dayNames,\n      monthNamesShort = _localeOptions3.monthNamesShort,\n      monthNames = _localeOptions3.monthNames;\n    for (iFormat = 0; iFormat < format.length; iFormat++) {\n      if (literal) {\n        if (format.charAt(iFormat) === \"'\" && !lookAhead(\"'\")) {\n          literal = false;\n        } else {\n          checkLiteral();\n        }\n      } else {\n        switch (format.charAt(iFormat)) {\n          case 'd':\n            day = getNumber('d');\n            break;\n          case 'D':\n            getName('D', dayNamesShort, dayNames);\n            break;\n          case 'o':\n            doy = getNumber('o');\n            break;\n          case 'm':\n            month = getNumber('m');\n            break;\n          case 'M':\n            month = getName('M', monthNamesShort, monthNames);\n            break;\n          case 'y':\n            year = getNumber('y');\n            break;\n          case '@':\n            date = new Date(getNumber('@'));\n            year = date.getFullYear();\n            month = date.getMonth() + 1;\n            day = date.getDate();\n            break;\n          case '!':\n            date = new Date((getNumber('!') - ticksTo1970) / 10000);\n            year = date.getFullYear();\n            month = date.getMonth() + 1;\n            day = date.getDate();\n            break;\n          case \"'\":\n            if (lookAhead(\"'\")) {\n              checkLiteral();\n            } else {\n              literal = true;\n            }\n            break;\n          default:\n            checkLiteral();\n        }\n      }\n    }\n    if (iValue < value.length) {\n      extra = value.substr(iValue);\n      if (!/^\\s+/.test(extra)) {\n        throw new Error('Extra/unparsed characters found in date: ' + extra);\n      }\n    }\n    if (year === -1) {\n      year = new Date().getFullYear();\n    } else if (year < 100) {\n      year = year + (new Date().getFullYear() - new Date().getFullYear() % 100 + (year <= shortYearCutoff ? 0 : -100));\n    }\n    if (doy > -1) {\n      month = 1;\n      day = doy;\n      do {\n        dim = getDaysCountInMonth(year, month - 1);\n        if (day <= dim) {\n          break;\n        }\n        month++;\n        day = day - dim;\n      } while (true);\n    }\n    date = daylightSavingAdjust(new Date(year, month - 1, day));\n    if (date.getFullYear() !== year || date.getMonth() + 1 !== month || date.getDate() !== day) {\n      throw new Error('Invalid date'); // E.g. 31/02/00\n    }\n    return date;\n  };\n  var isInMinYear = function isInMinYear(viewDate) {\n    return props.minDate && props.minDate.getFullYear() === viewDate.getFullYear();\n  };\n  var isInMaxYear = function isInMaxYear(viewDate) {\n    return props.maxDate && props.maxDate.getFullYear() === viewDate.getFullYear();\n  };\n  React.useEffect(function () {\n    ObjectUtils.combinedRefs(inputRef, props.inputRef);\n  }, [inputRef, props.inputRef]);\n  useMountEffect(function () {\n    var viewDate = getViewDate(props.viewDate);\n    validateDate(viewDate);\n    setViewDateState(viewDate);\n    setCurrentMonth(viewDate.getMonth());\n    setCurrentYear(viewDate.getFullYear());\n    setCurrentView(props.view);\n    if (!idState) {\n      var uniqueId = UniqueComponentId();\n      !idState && setIdState(uniqueId);\n    }\n    if (props.inline) {\n      overlayRef && overlayRef.current.setAttribute(attributeSelector, '');\n      if (!props.disabled) {\n        initFocusableCell();\n        if (props.numberOfMonths === 1) {\n          overlayRef.current.style.width = DomHandler.getOuterWidth(overlayRef.current) + 'px';\n        }\n      }\n    }\n    if (props.value) {\n      updateInputfield(props.value);\n      setValue(props.value);\n    }\n    if (props.autoFocus) {\n      // delay showing until rendered so `alignPanel()` method aligns the popup in the right location\n      setTimeout(function () {\n        return DomHandler.focus(inputRef.current, props.autoFocus);\n      }, 200);\n    }\n  });\n  React.useEffect(function () {\n    // see https://github.com/primefaces/primereact/issues/4030\n    onChangeRef.current = props.onChange;\n  }, [props.onChange]);\n  React.useEffect(function () {\n    var unbindMaskEvents = null;\n    if (props.mask) {\n      unbindMaskEvents = mask(inputRef.current, {\n        mask: props.mask,\n        slotChar: props.maskSlotChar,\n        readOnly: props.readOnlyInput || props.disabled,\n        onChange: function onChange(e) {\n          updateValueOnInput(e.originalEvent, e.value, function () {\n            return false;\n          });\n        },\n        onBlur: function onBlur(e) {\n          updateValueOnInput(e, e.target.value);\n        }\n      }).unbindEvents;\n    }\n    return function () {\n      props.mask && unbindMaskEvents && unbindMaskEvents();\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props.disabled, props.mask, props.readOnlyInput]);\n  useUpdateEffect(function () {\n    if (viewChangedWithKeyDown.current) {\n      setCurrentView(props.view);\n    }\n    viewChangedWithKeyDown.current = false;\n  }, [props.view]);\n  useUpdateEffect(function () {\n    focusToFirstCell();\n  }, [currentView]);\n  useUpdateEffect(function () {\n    if (!props.onViewDateChange && !viewStateChanged.current) {\n      setValue(props.value);\n    }\n    if (props.viewDate) {\n      updateViewDate(null, getViewDate(props.viewDate));\n    }\n  }, [props.onViewDateChange, props.value, props.viewDate]);\n  useUpdateEffect(function () {\n    if (overlayVisibleState || props.visible) {\n      // Github #5529\n      setTimeout(function () {\n        alignOverlay();\n      });\n    }\n  }, [currentView, overlayVisibleState, props.visible]);\n  useUpdateEffect(function () {\n    var newDate = props.value;\n    if (previousValue !== newDate) {\n      if (!isTypingRef.current) {\n        updateInputfield(newDate);\n      }\n      isTypingRef.current = false;\n\n      // #3516 view date not updated when value set programatically\n      if (!newDate) return;\n      var viewDate = newDate;\n      if (isMultipleSelection()) {\n        if (newDate.length) {\n          viewDate = newDate[newDate.length - 1];\n        }\n      } else if (isRangeSelection()) {\n        if (newDate.length) {\n          var startDate = newDate[0];\n          var endDate = newDate[1];\n          viewDate = endDate || startDate;\n        }\n      }\n      if (viewDate instanceof Date) {\n        validateDate(viewDate);\n        setViewDateState(viewDate);\n        setCurrentMonth(viewDate.getMonth());\n        setCurrentYear(viewDate.getFullYear());\n      }\n    }\n  }, [props.value, visible]);\n  useUpdateEffect(function () {\n    updateInputfield(props.value);\n  }, [props.dateFormat, props.hourFormat, props.timeOnly, props.showSeconds, props.showMillisec, props.showTime, props.locale]);\n  useUpdateEffect(function () {\n    if (overlayRef.current) {\n      setNavigationState(viewDateState);\n      updateFocus();\n    }\n  });\n  useUnmountEffect(function () {\n    if (touchUIMask.current) {\n      disableModality();\n      touchUIMask.current = null;\n    }\n    ZIndexUtils.clear(overlayRef.current);\n  });\n  React.useImperativeHandle(ref, function () {\n    return {\n      props: props,\n      show: show,\n      hide: hide,\n      getCurrentDateTime: getCurrentDateTime,\n      getViewDate: getViewDate,\n      updateViewDate: updateViewDate,\n      focus: function focus() {\n        return DomHandler.focus(inputRef.current);\n      },\n      getElement: function getElement() {\n        return elementRef.current;\n      },\n      getOverlay: function getOverlay() {\n        return overlayRef.current;\n      },\n      getInput: function getInput() {\n        return inputRef.current;\n      }\n    };\n  });\n  var setValue = function setValue(propValue) {\n    if (Array.isArray(propValue)) {\n      propValue = propValue[0];\n    }\n    var prevPropValue = previousValue;\n    if (Array.isArray(prevPropValue)) {\n      prevPropValue = prevPropValue[0];\n    }\n    var viewDate = props.viewDate && isValidDate(props.viewDate) ? props.viewDate : propValue && isValidDate(propValue) ? propValue : new Date();\n    if (isClearClicked.current && props.showTime) {\n      viewDate.setHours(0, 0, 0);\n      isClearClicked.current = false;\n    }\n    if (!prevPropValue && propValue || propValue && propValue instanceof Date && propValue.getTime() !== prevPropValue.getTime()) {\n      validateDate(viewDate);\n    }\n    setViewDateState(viewDate);\n    viewStateChanged.current = true;\n  };\n  var createBackwardNavigator = function createBackwardNavigator(isVisible) {\n    var navigatorProps = isVisible ? {\n      onClick: onPrevButtonClick,\n      onKeyDown: function onKeyDown(e) {\n        return onContainerButtonKeydown(e);\n      }\n    } : {\n      style: {\n        visibility: 'hidden'\n      }\n    };\n    var previousIconProps = mergeProps({\n      className: cx('previousIcon')\n    }, ptm('previousIcon'));\n    var icon = props.prevIcon || /*#__PURE__*/React.createElement(ChevronLeftIcon, previousIconProps);\n    var backwardNavigatorIcon = IconUtils.getJSXIcon(icon, _objectSpread({}, previousIconProps), {\n      props: props\n    });\n    var _localeOptions4 = localeOptions(props.locale),\n      prevDecade = _localeOptions4.prevDecade,\n      prevYear = _localeOptions4.prevYear,\n      prevMonth = _localeOptions4.prevMonth;\n    var previousButtonLabel = currentView === 'year' ? prevDecade : currentView === 'month' ? prevYear : prevMonth;\n    var previousButtonProps = mergeProps(_objectSpread({\n      type: 'button',\n      className: cx('previousButton'),\n      'aria-label': previousButtonLabel\n    }, navigatorProps), ptm('previousButton'));\n    return /*#__PURE__*/React.createElement(\"button\", _extends({\n      ref: previousButton\n    }, previousButtonProps), backwardNavigatorIcon, /*#__PURE__*/React.createElement(Ripple, null));\n  };\n  var createForwardNavigator = function createForwardNavigator(isVisible) {\n    var navigatorProps = isVisible ? {\n      onClick: onNextButtonClick,\n      onKeyDown: function onKeyDown(e) {\n        return onContainerButtonKeydown(e);\n      }\n    } : {\n      style: {\n        visibility: 'hidden'\n      }\n    };\n    var nextIconProps = mergeProps({\n      className: cx('nextIcon')\n    }, ptm('nextIcon'));\n    var icon = props.nextIcon || /*#__PURE__*/React.createElement(ChevronRightIcon, nextIconProps);\n    var forwardNavigatorIcon = IconUtils.getJSXIcon(icon, _objectSpread({}, nextIconProps), {\n      props: props\n    });\n    var _localeOptions5 = localeOptions(props.locale),\n      nextDecade = _localeOptions5.nextDecade,\n      nextYear = _localeOptions5.nextYear,\n      nextMonth = _localeOptions5.nextMonth;\n    var nextButtonLabel = currentView === 'year' ? nextDecade : currentView === 'month' ? nextYear : nextMonth;\n    var nextButtonProps = mergeProps(_objectSpread({\n      type: 'button',\n      className: cx('nextButton'),\n      'aria-label': nextButtonLabel\n    }, navigatorProps), ptm('nextButton'));\n    return /*#__PURE__*/React.createElement(\"button\", _extends({\n      ref: nextButton\n    }, nextButtonProps), forwardNavigatorIcon, /*#__PURE__*/React.createElement(Ripple, null));\n  };\n  var renderMonthsNavigator = function renderMonthsNavigator(index) {\n    return props.monthNavigator && props.view !== 'month' && (props.numberOfMonths === 1 || index === 0);\n  };\n  var createTitleMonthElement = function createTitleMonthElement(month, monthIndex) {\n    var monthNames = localeOption('monthNames', props.locale);\n    if (renderMonthsNavigator(monthIndex)) {\n      var viewDate = getViewDate();\n      var viewMonth = viewDate.getMonth();\n      var displayedMonthOptions = monthNames.map(function (month, index) {\n        return (!isInMinYear(viewDate) || index >= props.minDate.getMonth()) && (!isInMaxYear(viewDate) || index <= props.maxDate.getMonth()) ? {\n          label: month,\n          value: index,\n          index: index\n        } : null;\n      }).filter(function (option) {\n        return !!option;\n      });\n      var displayedMonthNames = displayedMonthOptions.map(function (option) {\n        return option.label;\n      });\n      var selectProps = mergeProps({\n        className: cx('select'),\n        onChange: function onChange(e) {\n          return onMonthDropdownChange(e, e.target.value);\n        },\n        value: viewMonth\n      }, ptm('select'));\n      var _content = /*#__PURE__*/React.createElement(\"select\", selectProps, displayedMonthOptions.map(function (option) {\n        var optionProps = mergeProps({\n          value: option.value\n        }, ptm('option'));\n        return /*#__PURE__*/React.createElement(\"option\", _extends({}, optionProps, {\n          key: option.label\n        }), option.label);\n      }));\n      if (props.monthNavigatorTemplate) {\n        var defaultContentOptions = {\n          onChange: onMonthDropdownChange,\n          className: 'p-datepicker-month',\n          value: viewMonth,\n          names: displayedMonthNames,\n          options: displayedMonthOptions,\n          element: _content,\n          props: props\n        };\n        return ObjectUtils.getJSXElement(props.monthNavigatorTemplate, defaultContentOptions);\n      }\n      return _content;\n    }\n    var monthTitleProps = mergeProps({\n      className: cx('monthTitle'),\n      onKeyDown: onContainerButtonKeydown,\n      'aria-label': localeOption('chooseMonth', props.locale),\n      onClick: switchToMonthView,\n      disabled: switchViewButtonDisabled()\n    }, ptm('monthTitle'));\n    return currentView === 'date' && /*#__PURE__*/React.createElement(\"button\", monthTitleProps, monthNames[month]);\n  };\n  var createTitleYearElement = function createTitleYearElement(metaYear) {\n    var viewDate = getViewDate();\n    var viewYear = viewDate.getFullYear();\n    var displayYear = props.numberOfMonths > 1 ? metaYear : currentYear;\n    if (props.yearNavigator) {\n      var _yearOptions2 = [];\n      if (props.yearRange) {\n        var years = props.yearRange.split(':');\n        var yearStart = parseInt(years[0], 10);\n        var yearEnd = parseInt(years[1], 10);\n        for (var i = yearStart; i <= yearEnd; i++) {\n          _yearOptions2.push(i);\n        }\n      } else {\n        var base = viewYear - viewYear % 10;\n        for (var _i2 = 0; _i2 < 10; _i2++) {\n          _yearOptions2.push(base + _i2);\n        }\n      }\n      var displayedYearNames = _yearOptions2.filter(function (year) {\n        return !(props.minDate && props.minDate.getFullYear() > year) && !(props.maxDate && props.maxDate.getFullYear() < year);\n      });\n      var selectProps = mergeProps({\n        className: cx('select'),\n        onChange: function onChange(e) {\n          return onYearDropdownChange(e, e.target.value);\n        },\n        value: displayYear\n      }, ptm('select'));\n      var _content2 = /*#__PURE__*/React.createElement(\"select\", selectProps, displayedYearNames.map(function (year) {\n        var optionProps = mergeProps({\n          value: year\n        }, ptm('option'));\n        return /*#__PURE__*/React.createElement(\"option\", _extends({}, optionProps, {\n          key: year\n        }), year);\n      }));\n      if (props.yearNavigatorTemplate) {\n        var options = displayedYearNames.map(function (name, i) {\n          return {\n            label: name,\n            value: name,\n            index: i\n          };\n        });\n        var defaultContentOptions = {\n          onChange: onYearDropdownChange,\n          className: 'p-datepicker-year',\n          value: viewYear,\n          names: displayedYearNames,\n          options: options,\n          element: _content2,\n          props: props\n        };\n        return ObjectUtils.getJSXElement(props.yearNavigatorTemplate, defaultContentOptions);\n      }\n      return _content2;\n    }\n    var yearTitleProps = mergeProps({\n      className: cx('yearTitle'),\n      'aria-label': localeOption('chooseYear', props.locale),\n      onClick: function onClick(e) {\n        return switchToYearView(e);\n      },\n      disabled: switchViewButtonDisabled()\n    }, ptm('yearTitle'));\n    return currentView !== 'year' && /*#__PURE__*/React.createElement(\"button\", yearTitleProps, displayYear);\n  };\n  var createTitleDecadeElement = function createTitleDecadeElement() {\n    var years = yearPickerValues();\n    var decadeTitleProps = mergeProps({\n      className: cx('decadeTitle')\n    }, ptm('decadeTitle'));\n    if (currentView === 'year') {\n      var decadeTitleTextProps = mergeProps(ptm('decadeTitleText'));\n      return /*#__PURE__*/React.createElement(\"span\", decadeTitleProps, props.decadeTemplate ? props.decadeTemplate(years) : /*#__PURE__*/React.createElement(\"span\", decadeTitleTextProps, \"\".concat(yearPickerValues()[0], \" - \").concat(yearPickerValues()[yearPickerValues().length - 1])));\n    }\n    return null;\n  };\n  var createTitle = function createTitle(monthMetaData, index) {\n    var month = createTitleMonthElement(monthMetaData.month, index);\n    var year = createTitleYearElement(monthMetaData.year);\n    var decade = createTitleDecadeElement();\n    var titleProps = mergeProps({\n      className: cx('title')\n    }, ptm('title'));\n    var showMonthAfterYear = localeOption('showMonthAfterYear', props.locale);\n    return /*#__PURE__*/React.createElement(\"div\", titleProps, showMonthAfterYear ? year : month, showMonthAfterYear ? month : year, decade);\n  };\n  var createDayNames = function createDayNames(weekDays) {\n    var weekDayProps = mergeProps(ptm('weekDay'));\n    var tableHeaderCellProps = mergeProps({\n      scope: 'col'\n    }, ptm('tableHeaderCell'));\n    var dayNames = weekDays.map(function (weekDay, index) {\n      return /*#__PURE__*/React.createElement(\"th\", _extends({}, tableHeaderCellProps, {\n        key: \"\".concat(weekDay, \"-\").concat(index)\n      }), /*#__PURE__*/React.createElement(\"span\", weekDayProps, weekDay));\n    });\n    if (props.showWeek) {\n      var weekHeaderProps = mergeProps({\n        scope: 'col',\n        className: cx('weekHeader'),\n        'data-p-disabled': props.showWeek\n      }, ptm('weekHeader', {\n        context: {\n          disabled: props.showWeek\n        }\n      }));\n      var weekLabel = mergeProps(ptm('weekLabel'));\n      var weekHeader = /*#__PURE__*/React.createElement(\"th\", _extends({}, weekHeaderProps, {\n        key: \"wn\"\n      }), /*#__PURE__*/React.createElement(\"span\", weekLabel, localeOption('weekHeader', props.locale)));\n      return [weekHeader].concat(_toConsumableArray(dayNames));\n    }\n    return dayNames;\n  };\n  var createDateCellContent = function createDateCellContent(date, className, groupIndex) {\n    var content = props.dateTemplate ? props.dateTemplate(date) : date.day;\n    var selected = isSelected(date);\n    var dayLabelProps = mergeProps({\n      className: cx('dayLabel', {\n        className: className\n      }),\n      'aria-selected': selected,\n      'aria-disabled': !date.selectable,\n      onClick: function onClick(e) {\n        return onDateSelect(e, date);\n      },\n      onKeyDown: function onKeyDown(e) {\n        return onDateCellKeydown(e, date, groupIndex);\n      },\n      'data-p-highlight': selected,\n      'data-p-disabled': !date.selectable\n    }, ptm('dayLabel', {\n      context: {\n        selected: selected,\n        disabled: !date.selectable\n      }\n    }));\n    return /*#__PURE__*/React.createElement(\"span\", dayLabelProps, content, selected && /*#__PURE__*/React.createElement(\"div\", {\n      \"aria-live\": \"polite\",\n      className: \"p-hidden-accessible\",\n      \"data-p-hidden-accessible\": true,\n      pt: ptm('hiddenSelectedDay')\n    }));\n  };\n  var createWeek = function createWeek(weekDates, weekNumber, groupIndex) {\n    var week = weekDates.map(function (date) {\n      var selected = isSelected(date);\n      var dateClassName = classNames({\n        'p-highlight': selected,\n        'p-disabled': !date.selectable\n      });\n      var content = date.otherMonth && !props.showOtherMonths ? null : createDateCellContent(date, dateClassName, groupIndex);\n      var dayProps = mergeProps({\n        className: cx('day', {\n          date: date\n        }),\n        'aria-label': date.day,\n        'data-p-today': date.today,\n        'data-p-other-month': date.otherMonth\n      }, ptm('day', {\n        context: {\n          date: date,\n          today: date.today,\n          otherMonth: date.otherMonth\n        }\n      }));\n      return /*#__PURE__*/React.createElement(\"td\", _extends({}, dayProps, {\n        key: date.day\n      }), content);\n    });\n    if (props.showWeek) {\n      var weekNumberProps = mergeProps({\n        className: cx('weekNumber')\n      }, ptm('weekNumber'));\n      var weekLabelContainerProps = mergeProps({\n        className: cx('weekLabelContainer'),\n        'data-p-disabled': props.showWeek\n      }, ptm('weekLabelContainer', {\n        context: {\n          disabled: props.showWeek\n        }\n      }));\n      var weekNumberCell = /*#__PURE__*/React.createElement(\"td\", _extends({}, weekNumberProps, {\n        key: 'wn' + weekNumber\n      }), /*#__PURE__*/React.createElement(\"span\", weekLabelContainerProps, weekNumber));\n      return [weekNumberCell].concat(_toConsumableArray(week));\n    }\n    return week;\n  };\n  var createDates = function createDates(monthMetaData, groupIndex) {\n    var tableBodyRowProps = mergeProps(ptm('tableBodyRowProps'));\n    return monthMetaData.dates.map(function (weekDates, index) {\n      return /*#__PURE__*/React.createElement(\"tr\", _extends({}, tableBodyRowProps, {\n        key: index\n      }), createWeek(weekDates, monthMetaData.weekNumbers[index], groupIndex));\n    });\n  };\n  var createDateViewGrid = function createDateViewGrid(monthMetaData, weekDays, groupIndex) {\n    var dayNames = createDayNames(weekDays);\n    var dates = createDates(monthMetaData, groupIndex);\n    var containerProps = mergeProps({\n      className: cx('container'),\n      key: UniqueComponentId('calendar_container_')\n    }, ptm('container'));\n    var tableProps = mergeProps({\n      role: 'grid',\n      className: cx('table')\n    }, ptm('table'));\n    var tableHeaderProps = mergeProps(ptm('tableHeader'));\n    var tableHeaderRowProps = mergeProps(ptm('tableHeaderRow'));\n    var tableBodyProps = mergeProps(ptm('tableBody'));\n    return currentView === 'date' && /*#__PURE__*/React.createElement(\"div\", containerProps, /*#__PURE__*/React.createElement(\"table\", tableProps, /*#__PURE__*/React.createElement(\"thead\", tableHeaderProps, /*#__PURE__*/React.createElement(\"tr\", tableHeaderRowProps, dayNames)), /*#__PURE__*/React.createElement(\"tbody\", tableBodyProps, dates)));\n  };\n  var createMonth = function createMonth(monthMetaData, index) {\n    var weekDays = createWeekDaysMeta();\n    var backwardNavigator = createBackwardNavigator(index === 0);\n    var forwardNavigator = createForwardNavigator(props.numberOfMonths === 1 || index === props.numberOfMonths - 1);\n    var title = createTitle(monthMetaData, index);\n    var dateViewGrid = createDateViewGrid(monthMetaData, weekDays, index);\n    var header = props.headerTemplate ? props.headerTemplate() : null;\n    var monthKey = monthMetaData.month + '-' + monthMetaData.year;\n    var groupProps = mergeProps({\n      className: cx('group')\n    }, ptm('group'));\n    var headerProps = mergeProps({\n      className: cx('header'),\n      key: index\n    }, ptm('header'));\n    return /*#__PURE__*/React.createElement(\"div\", _extends({}, groupProps, {\n      key: monthKey\n    }), /*#__PURE__*/React.createElement(\"div\", headerProps, header, backwardNavigator, title, forwardNavigator), dateViewGrid);\n  };\n  var createMonths = function createMonths(monthsMetaData) {\n    var groups = monthsMetaData.map(createMonth);\n    var groupContainerProps = mergeProps({\n      className: cx('groupContainer')\n    }, ptm('groupContainer'));\n    return /*#__PURE__*/React.createElement(\"div\", groupContainerProps, groups);\n  };\n  var createDateView = function createDateView() {\n    var viewDate = getViewDate();\n    var monthsMetaData = createMonthsMeta(viewDate.getMonth(), viewDate.getFullYear());\n    var months = createMonths(monthsMetaData);\n    return months;\n  };\n  var monthPickerValues = function monthPickerValues() {\n    var monthPickerValues = [];\n    var monthNamesShort = localeOption('monthNamesShort', props.locale);\n    for (var i = 0; i <= 11; i++) {\n      monthPickerValues.push(monthNamesShort[i]);\n    }\n    return monthPickerValues;\n  };\n  var yearPickerValues = function yearPickerValues() {\n    var yearPickerValues = [];\n    var base = currentYear - currentYear % 10;\n    for (var i = 0; i < 10; i++) {\n      yearPickerValues.push(base + i);\n    }\n    return yearPickerValues;\n  };\n  var createMonthYearView = function createMonthYearView() {\n    var backwardNavigator = createBackwardNavigator(true);\n    var forwardNavigator = createForwardNavigator(true);\n    var yearElement = createTitleYearElement(getViewDate().getFullYear());\n    var decade = createTitleDecadeElement();\n    var groupContainerProps = mergeProps({\n      className: cx('groupContainer')\n    }, ptm('groupContainer'));\n    var groupProps = mergeProps({\n      className: cx('group')\n    }, ptm('group'));\n    var headerProps = mergeProps({\n      className: cx('header')\n    }, ptm('header'));\n    var titleProps = mergeProps({\n      className: cx('title')\n    }, ptm('title'));\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", groupContainerProps, /*#__PURE__*/React.createElement(\"div\", groupProps, /*#__PURE__*/React.createElement(\"div\", headerProps, backwardNavigator, /*#__PURE__*/React.createElement(\"div\", titleProps, yearElement, decade), forwardNavigator))));\n  };\n  var createDatePicker = function createDatePicker() {\n    if (!props.timeOnly) {\n      if (props.view === 'date') {\n        return createDateView();\n      }\n      return createMonthYearView();\n    }\n    return null;\n  };\n  var incrementIconProps = mergeProps(ptm('incrementIcon'));\n  var decrementIconProps = mergeProps(ptm('decrementIcon'));\n  var incrementIcon = IconUtils.getJSXIcon(props.incrementIcon || /*#__PURE__*/React.createElement(ChevronUpIcon, incrementIconProps), _objectSpread({}, incrementIconProps), {\n    props: props\n  });\n  var decrementIcon = IconUtils.getJSXIcon(props.decrementIcon || /*#__PURE__*/React.createElement(ChevronDownIcon, decrementIconProps), _objectSpread({}, decrementIconProps), {\n    props: props\n  });\n  var createHourPicker = function createHourPicker() {\n    var currentTime = getCurrentDateTime();\n    var minute = doStepMinute(currentTime.getMinutes());\n    var hour = currentTime.getHours();\n\n    // #3770 account for step minutes rolling to next hour\n    hour = minute > 59 ? hour + 1 : hour;\n    if (props.hourFormat === '12') {\n      if (hour === 0) {\n        hour = 12;\n      } else if (hour > 11 && hour !== 12) {\n        hour = hour - 12;\n      }\n    }\n    var hourProps = mergeProps(ptm('hour'));\n    var _localeOptions6 = localeOptions(props.locale),\n      nextHour = _localeOptions6.nextHour,\n      prevHour = _localeOptions6.prevHour;\n    var hourDisplay = hour < 10 ? '0' + hour : hour;\n    var hourPickerProps = mergeProps({\n      className: cx('hourPicker')\n    }, ptm('hourPicker'));\n    var incrementButtonProps = mergeProps({\n      type: 'button',\n      className: cx('incrementButton'),\n      'aria-label': nextHour,\n      onMouseDown: function onMouseDown(e) {\n        return onTimePickerElementMouseDown(e, 0, 1);\n      },\n      onMouseUp: onTimePickerElementMouseUp,\n      onMouseLeave: onTimePickerElementMouseLeave,\n      onKeyDown: function onKeyDown(e) {\n        return onPickerKeyDown(e, 0, 1);\n      },\n      onKeyUp: onPickerKeyUp\n    }, ptm('incrementButton'));\n    var decrementButtonProps = mergeProps({\n      type: 'button',\n      className: cx('decrementButton'),\n      'aria-label': prevHour,\n      onMouseDown: function onMouseDown(e) {\n        return onTimePickerElementMouseDown(e, 0, -1);\n      },\n      onMouseUp: onTimePickerElementMouseUp,\n      onMouseLeave: onTimePickerElementMouseLeave,\n      onKeyDown: function onKeyDown(e) {\n        return onPickerKeyDown(e, 0, -1);\n      },\n      onKeyUp: onPickerKeyUp\n    }, ptm('decrementButton'));\n    return /*#__PURE__*/React.createElement(\"div\", hourPickerProps, /*#__PURE__*/React.createElement(\"button\", incrementButtonProps, incrementIcon, /*#__PURE__*/React.createElement(Ripple, null)), /*#__PURE__*/React.createElement(\"span\", hourProps, hourDisplay), /*#__PURE__*/React.createElement(\"button\", decrementButtonProps, decrementIcon, /*#__PURE__*/React.createElement(Ripple, null)));\n  };\n  var createMinutePicker = function createMinutePicker() {\n    var currentTime = getCurrentDateTime();\n    var minute = doStepMinute(currentTime.getMinutes());\n    minute = minute > 59 ? minute - 60 : minute;\n    var minuteProps = mergeProps(ptm('minute'));\n    var _localeOptions7 = localeOptions(props.locale),\n      nextMinute = _localeOptions7.nextMinute,\n      prevMinute = _localeOptions7.prevMinute;\n    var minuteDisplay = minute < 10 ? '0' + minute : minute;\n    var minutePickerProps = mergeProps({\n      className: cx('minutePicker')\n    }, ptm('minutePicker'));\n    var incrementButtonProps = mergeProps({\n      type: 'button',\n      className: cx('incrementButton'),\n      'aria-label': nextMinute,\n      onMouseDown: function onMouseDown(e) {\n        return onTimePickerElementMouseDown(e, 1, 1);\n      },\n      onMouseUp: onTimePickerElementMouseUp,\n      onMouseLeave: onTimePickerElementMouseLeave,\n      onKeyDown: function onKeyDown(e) {\n        return onPickerKeyDown(e, 1, 1);\n      },\n      onKeyUp: onPickerKeyUp\n    }, ptm('incrementButton'));\n    var decrementButtonProps = mergeProps({\n      type: 'button',\n      className: cx('decrementButton'),\n      'aria-label': prevMinute,\n      onMouseDown: function onMouseDown(e) {\n        return onTimePickerElementMouseDown(e, 1, -1);\n      },\n      onMouseUp: onTimePickerElementMouseUp,\n      onMouseLeave: onTimePickerElementMouseLeave,\n      onKeyDown: function onKeyDown(e) {\n        return onPickerKeyDown(e, 1, -1);\n      },\n      onKeyUp: onPickerKeyUp\n    }, ptm('decrementButton'));\n    return /*#__PURE__*/React.createElement(\"div\", minutePickerProps, /*#__PURE__*/React.createElement(\"button\", incrementButtonProps, incrementIcon, /*#__PURE__*/React.createElement(Ripple, null)), /*#__PURE__*/React.createElement(\"span\", minuteProps, minuteDisplay), /*#__PURE__*/React.createElement(\"button\", decrementButtonProps, decrementIcon, /*#__PURE__*/React.createElement(Ripple, null)));\n  };\n  var createSecondPicker = function createSecondPicker() {\n    if (props.showSeconds) {\n      var currentTime = getCurrentDateTime();\n      var _localeOptions8 = localeOptions(props.locale),\n        nextSecond = _localeOptions8.nextSecond,\n        prevSecond = _localeOptions8.prevSecond;\n      var secondProps = mergeProps(ptm('second'));\n      var second = currentTime.getSeconds();\n      var secondDisplay = second < 10 ? '0' + second : second;\n      var secondPickerProps = mergeProps({\n        className: cx('secondPicker')\n      }, ptm('secondPicker'));\n      var incrementButtonProps = mergeProps({\n        type: 'button',\n        className: cx('incrementButton'),\n        'aria-label': nextSecond,\n        onMouseDown: function onMouseDown(e) {\n          return onTimePickerElementMouseDown(e, 2, 1);\n        },\n        onMouseUp: onTimePickerElementMouseUp,\n        onMouseLeave: onTimePickerElementMouseLeave,\n        onKeyDown: function onKeyDown(e) {\n          return onPickerKeyDown(e, 2, 1);\n        },\n        onKeyUp: onPickerKeyUp\n      }, ptm('incrementButton'));\n      var decrementButtonProps = mergeProps({\n        type: 'button',\n        className: cx('decrementButton'),\n        'aria-label': prevSecond,\n        onMouseDown: function onMouseDown(e) {\n          return onTimePickerElementMouseDown(e, 2, -1);\n        },\n        onMouseUp: onTimePickerElementMouseUp,\n        onMouseLeave: onTimePickerElementMouseLeave,\n        onKeyDown: function onKeyDown(e) {\n          return onPickerKeyDown(e, 2, -1);\n        },\n        onKeyUp: onPickerKeyUp\n      }, ptm('decrementButton'));\n      return /*#__PURE__*/React.createElement(\"div\", secondPickerProps, /*#__PURE__*/React.createElement(\"button\", incrementButtonProps, incrementIcon, /*#__PURE__*/React.createElement(Ripple, null)), /*#__PURE__*/React.createElement(\"span\", secondProps, secondDisplay), /*#__PURE__*/React.createElement(\"button\", decrementButtonProps, decrementIcon, /*#__PURE__*/React.createElement(Ripple, null)));\n    }\n    return null;\n  };\n  var createMiliSecondPicker = function createMiliSecondPicker() {\n    if (props.showMillisec) {\n      var currentTime = getCurrentDateTime();\n      var _localeOptions9 = localeOptions(props.locale),\n        nextMilliSecond = _localeOptions9.nextMilliSecond,\n        prevMilliSecond = _localeOptions9.prevMilliSecond;\n      var millisecondProps = mergeProps(ptm('millisecond'));\n      var millisecond = currentTime.getMilliseconds();\n      var millisecondDisplay = millisecond < 100 ? (millisecond < 10 ? '00' : '0') + millisecond : millisecond;\n      var millisecondPickerProps = mergeProps({\n        className: cx('millisecondPicker')\n      }, ptm('millisecondPicker'));\n      var incrementButtonProps = mergeProps({\n        type: 'button',\n        className: cx('incrementButton'),\n        'aria-label': nextMilliSecond,\n        onMouseDown: function onMouseDown(e) {\n          return onTimePickerElementMouseDown(e, 3, 1);\n        },\n        onMouseUp: onTimePickerElementMouseUp,\n        onMouseLeave: onTimePickerElementMouseLeave,\n        onKeyDown: function onKeyDown(e) {\n          return onPickerKeyDown(e, 3, 1);\n        },\n        onKeyUp: onPickerKeyUp\n      }, ptm('incrementButton'));\n      var decrementButtonProps = mergeProps({\n        type: 'button',\n        className: cx('decrementButton'),\n        'aria-label': prevMilliSecond,\n        onMouseDown: function onMouseDown(e) {\n          return onTimePickerElementMouseDown(e, 3, -1);\n        },\n        onMouseUp: onTimePickerElementMouseUp,\n        onMouseLeave: onTimePickerElementMouseLeave,\n        onKeyDown: function onKeyDown(e) {\n          return onPickerKeyDown(e, 3, -1);\n        },\n        onKeyUp: onPickerKeyUp\n      }, ptm('decrementButton'));\n      return /*#__PURE__*/React.createElement(\"div\", millisecondPickerProps, /*#__PURE__*/React.createElement(\"button\", incrementButtonProps, incrementIcon, /*#__PURE__*/React.createElement(Ripple, null)), /*#__PURE__*/React.createElement(\"span\", millisecondProps, millisecondDisplay), /*#__PURE__*/React.createElement(\"button\", decrementButtonProps, decrementIcon, /*#__PURE__*/React.createElement(Ripple, null)));\n    }\n    return null;\n  };\n  var createAmPmPicker = function createAmPmPicker() {\n    if (props.hourFormat === '12') {\n      var currentTime = getCurrentDateTime();\n      var _localeOptions10 = localeOptions(props.locale),\n        am = _localeOptions10.am,\n        pm = _localeOptions10.pm;\n      var hour = currentTime.getHours();\n      var display = hour > 11 ? 'PM' : 'AM';\n      var ampmProps = mergeProps(ptm('ampm'));\n      var ampmPickerProps = mergeProps({\n        className: cx('ampmPicker')\n      }, ptm('ampmPicker'));\n      var incrementButtonProps = mergeProps({\n        type: 'button',\n        className: cx('incrementButton'),\n        'aria-label': am,\n        onClick: function onClick(e) {\n          return toggleAmPm(e);\n        }\n      }, ptm('incrementButton'));\n      var decrementButtonProps = mergeProps({\n        type: 'button',\n        className: cx('decrementButton'),\n        'aria-label': pm,\n        onClick: function onClick(e) {\n          return toggleAmPm(e);\n        }\n      }, ptm('decrementButton'));\n      return /*#__PURE__*/React.createElement(\"div\", ampmPickerProps, /*#__PURE__*/React.createElement(\"button\", incrementButtonProps, incrementIcon, /*#__PURE__*/React.createElement(Ripple, null)), /*#__PURE__*/React.createElement(\"span\", ampmProps, display), /*#__PURE__*/React.createElement(\"button\", decrementButtonProps, decrementIcon, /*#__PURE__*/React.createElement(Ripple, null)));\n    }\n    return null;\n  };\n  var createSeparator = function createSeparator(separator) {\n    var separatorContainerProps = mergeProps({\n      className: cx('separatorContainer')\n    }, ptm('separatorContainer'));\n    var separatorProps = mergeProps(ptm('separator'));\n    return /*#__PURE__*/React.createElement(\"div\", separatorContainerProps, /*#__PURE__*/React.createElement(\"span\", separatorProps, separator));\n  };\n  var createTimePicker = function createTimePicker() {\n    if ((props.showTime || props.timeOnly) && currentView === 'date') {\n      var timePickerProps = mergeProps({\n        className: cx('timePicker')\n      }, ptm('timePicker'));\n      return /*#__PURE__*/React.createElement(\"div\", timePickerProps, createHourPicker(), createSeparator(':'), createMinutePicker(), props.showSeconds && createSeparator(':'), createSecondPicker(), props.showMillisec && createSeparator('.'), createMiliSecondPicker(), props.hourFormat === '12' && createSeparator(':'), createAmPmPicker());\n    }\n    return null;\n  };\n  var createInputElement = function createInputElement() {\n    if (!props.inline) {\n      return /*#__PURE__*/React.createElement(InputText, {\n        ref: inputRef,\n        id: props.inputId,\n        name: props.name,\n        type: \"text\",\n        role: \"combobox\",\n        className: classNames(props.inputClassName, cx('input', {\n          context: context\n        })),\n        style: props.inputStyle,\n        readOnly: props.readOnlyInput,\n        disabled: props.disabled,\n        required: props.required,\n        autoComplete: \"off\",\n        placeholder: props.placeholder,\n        tabIndex: props.tabIndex,\n        onInput: onUserInput,\n        onFocus: onInputFocus,\n        onBlur: onInputBlur,\n        onKeyDown: onInputKeyDown,\n        \"aria-expanded\": overlayVisibleState,\n        \"aria-autocomplete\": \"none\",\n        \"aria-haspopup\": \"dialog\",\n        \"aria-controls\": panelId,\n        \"aria-labelledby\": props.ariaLabelledBy,\n        \"aria-label\": props.ariaLabel,\n        inputMode: props.inputMode,\n        tooltip: props.tooltip,\n        tooltipOptions: props.tooltipOptions,\n        pt: ptm('input'),\n        __parentMetadata: {\n          parent: metaData\n        }\n      });\n    }\n    return null;\n  };\n  var createButton = function createButton() {\n    if (props.showIcon) {\n      return /*#__PURE__*/React.createElement(Button, {\n        type: \"button\",\n        icon: props.icon || /*#__PURE__*/React.createElement(CalendarIcon, null),\n        onClick: onButtonClick,\n        tabIndex: \"-1\",\n        disabled: props.disabled,\n        \"aria-haspopup\": \"dialog\",\n        \"aria-label\": localeOption('chooseDate', props.locale),\n        \"aria-expanded\": overlayVisibleState,\n        \"aria-controls\": panelId,\n        className: cx('dropdownButton'),\n        pt: ptm('dropdownButton'),\n        __parentMetadata: {\n          parent: metaData\n        }\n      });\n    }\n    return null;\n  };\n  var createContent = function createContent() {\n    var input = createInputElement();\n    var button = createButton();\n    if (props.iconPos === 'left') {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, button, input);\n    }\n    return /*#__PURE__*/React.createElement(React.Fragment, null, input, button);\n  };\n  var createButtonBar = function createButtonBar() {\n    if (props.showButtonBar) {\n      var _localeOptions11 = localeOptions(props.locale),\n        today = _localeOptions11.today,\n        clear = _localeOptions11.clear,\n        now = _localeOptions11.now;\n      var nowDate = new Date();\n      var isHidden = props.minDate && props.minDate > nowDate || props.maxDate && props.maxDate < nowDate;\n      var buttonbarProps = mergeProps({\n        className: cx('buttonbar')\n      }, ptm('buttonbar'));\n      return /*#__PURE__*/React.createElement(\"div\", buttonbarProps, /*#__PURE__*/React.createElement(Button, {\n        type: \"button\",\n        label: props.showTime ? now : today,\n        onClick: onTodayButtonClick,\n        onKeyDown: function onKeyDown(e) {\n          return onContainerButtonKeydown(e);\n        },\n        className: classNames(props.todayButtonClassName, cx('todayButton')),\n        pt: ptm('todayButton'),\n        style: isHidden ? {\n          visibility: 'hidden'\n        } : undefined\n      }), /*#__PURE__*/React.createElement(Button, {\n        type: \"button\",\n        label: clear,\n        onClick: onClearButtonClick,\n        onKeyDown: function onKeyDown(e) {\n          return onContainerButtonKeydown(e);\n        },\n        className: classNames(props.clearButtonClassName, cx('clearButton')),\n        pt: ptm('clearButton')\n      }));\n    }\n    return null;\n  };\n  var createFooter = function createFooter() {\n    if (props.footerTemplate) {\n      var _content3 = props.footerTemplate();\n      var footerProps = mergeProps({\n        className: cx('footer')\n      }, ptm('footer'));\n      return /*#__PURE__*/React.createElement(\"div\", footerProps, _content3);\n    }\n    return null;\n  };\n  var createMonthPicker = function createMonthPicker() {\n    if (currentView === 'month') {\n      var monthPickerProps = mergeProps({\n        className: cx('monthPicker')\n      }, ptm('monthPicker'));\n      return /*#__PURE__*/React.createElement(\"div\", monthPickerProps, monthPickerValues().map(function (m, i) {\n        var selected = isMonthSelected(i);\n        var monthProps = mergeProps({\n          className: cx('month', {\n            isMonthSelected: isMonthSelected,\n            isMonthYearDisabled: isMonthYearDisabled,\n            i: i,\n            currentYear: currentYear\n          }),\n          onClick: function onClick(event) {\n            return onMonthSelect(event, i);\n          },\n          onKeyDown: function onKeyDown(event) {\n            return onMonthCellKeydown(event, i);\n          },\n          'data-p-disabled': isMonthYearDisabled(i, currentYear),\n          'data-p-highlight': selected\n        }, ptm('month', {\n          context: {\n            month: m,\n            monthIndex: i,\n            selected: selected,\n            disabled: isMonthYearDisabled(i, currentYear)\n          }\n        }));\n        return /*#__PURE__*/React.createElement(\"span\", _extends({}, monthProps, {\n          key: \"month\".concat(i + 1)\n        }), m, selected && /*#__PURE__*/React.createElement(\"div\", {\n          \"aria-live\": \"polite\",\n          className: \"p-hidden-accessible\",\n          \"data-p-hidden-accessible\": true,\n          pt: ptm('hiddenMonth')\n        }, m));\n      }));\n    }\n    return null;\n  };\n  var createYearPicker = function createYearPicker() {\n    if (currentView === 'year') {\n      var yearPickerProps = mergeProps({\n        className: cx('yearPicker')\n      }, ptm('yearPicker'));\n      return /*#__PURE__*/React.createElement(\"div\", yearPickerProps, yearPickerValues().map(function (y, i) {\n        var selected = isYearSelected(y);\n        var yearProps = mergeProps({\n          className: cx('year', {\n            isYearSelected: isYearSelected,\n            isMonthYearDisabled: isMonthYearDisabled,\n            y: y\n          }),\n          onClick: function onClick(event) {\n            return onYearSelect(event, y);\n          },\n          onKeyDown: function onKeyDown(event) {\n            return onYearCellKeydown(event, y);\n          },\n          'data-p-highlight': isYearSelected(y),\n          'data-p-disabled': isMonthYearDisabled(-1, y)\n        }, ptm('year', {\n          context: {\n            year: y,\n            yearIndex: i,\n            selected: selected,\n            disabled: isMonthYearDisabled(-1, y)\n          }\n        }));\n        return /*#__PURE__*/React.createElement(\"span\", _extends({}, yearProps, {\n          key: \"year\".concat(i + 1)\n        }), y, selected && /*#__PURE__*/React.createElement(\"div\", {\n          \"aria-live\": \"polite\",\n          className: \"p-hidden-accessible\",\n          \"data-p-hidden-accessible\": true,\n          pt: ptm('hiddenYear')\n        }, y));\n      }));\n    }\n    return null;\n  };\n  var panelClassName = classNames('p-datepicker p-component', props.panelClassName, {\n    'p-datepicker-inline': props.inline,\n    'p-disabled': props.disabled,\n    'p-datepicker-timeonly': props.timeOnly,\n    'p-datepicker-multiple-month': props.numberOfMonths > 1,\n    'p-datepicker-monthpicker': currentView === 'month',\n    'p-datepicker-touch-ui': props.touchUI,\n    'p-input-filled': context && context.inputStyle === 'filled' || PrimeReact.inputStyle === 'filled',\n    'p-ripple-disabled': context && context.ripple === false || PrimeReact.ripple === false\n  });\n  var content = createContent();\n  var datePicker = createDatePicker();\n  var timePicker = createTimePicker();\n  var buttonBar = createButtonBar();\n  var footer = createFooter();\n  var monthPicker = createMonthPicker();\n  var yearPicker = createYearPicker();\n  var isFilled = DomHandler.hasClass(inputRef.current, 'p-filled') && inputRef.current.value !== '';\n  var rootProps = mergeProps({\n    id: props.id,\n    className: classNames(props.className, cx('root', {\n      focusedState: focusedState,\n      isFilled: isFilled,\n      panelVisible: visible\n    })),\n    style: props.style\n  }, CalendarBase.getOtherProps(props), ptm('root'));\n  return /*#__PURE__*/React.createElement(\"span\", _extends({\n    ref: elementRef\n  }, rootProps), content, /*#__PURE__*/React.createElement(CalendarPanel, {\n    hostName: \"Calendar\",\n    id: panelId,\n    locale: props.locale,\n    ref: overlayRef,\n    className: panelClassName,\n    style: props.panelStyle,\n    appendTo: props.appendTo,\n    inline: props.inline,\n    onClick: onPanelClick,\n    onMouseUp: onPanelMouseUp,\n    \"in\": visible,\n    onEnter: onOverlayEnter,\n    onEntered: onOverlayEntered,\n    onExit: onOverlayExit,\n    onExited: onOverlayExited,\n    transitionOptions: props.transitionOptions,\n    ptm: ptm,\n    cx: cx\n  }, datePicker, timePicker, monthPicker, yearPicker, buttonBar, footer));\n}));\nCalendar.displayName = 'Calendar';\nexport { Calendar };","map":null,"metadata":{},"sourceType":"module"}